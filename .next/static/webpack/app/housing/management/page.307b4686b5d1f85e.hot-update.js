"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/housing/management/page",{

/***/ "(app-pages-browser)/./src/lib/services/complexManagementService.ts":
/*!******************************************************!*\
  !*** ./src/lib/services/complexManagementService.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addBuildingToComplex: () => (/* binding */ addBuildingToComplex),\n/* harmony export */   addFloorToBuilding: () => (/* binding */ addFloorToBuilding),\n/* harmony export */   addRoomToFloor: () => (/* binding */ addRoomToFloor),\n/* harmony export */   addServiceToFloor: () => (/* binding */ addServiceToFloor),\n/* harmony export */   addServiceToRoom: () => (/* binding */ addServiceToRoom),\n/* harmony export */   createComplex: () => (/* binding */ createComplex),\n/* harmony export */   deleteComplex: () => (/* binding */ deleteComplex),\n/* harmony export */   getAllComplexes: () => (/* binding */ getAllComplexes),\n/* harmony export */   getBuildingById: () => (/* binding */ getBuildingById),\n/* harmony export */   getComplexById: () => (/* binding */ getComplexById),\n/* harmony export */   getFloorByNumber: () => (/* binding */ getFloorByNumber),\n/* harmony export */   importComplexesFromAPI: () => (/* binding */ importComplexesFromAPI),\n/* harmony export */   updateComplex: () => (/* binding */ updateComplex)\n/* harmony export */ });\n// المصفوفة الرئيسية لتخزين جميع المجمعات السكنية\nlet residentialComplexes = [];\n/**\r\n * الحصول على جميع المجمعات السكنية\r\n */ const getAllComplexes = ()=>{\n    return residentialComplexes;\n};\n/**\r\n * الحصول على مجمع سكني بواسطة المعرف\r\n */ const getComplexById = (id)=>{\n    return residentialComplexes.find((complex)=>complex.id === id);\n};\n/**\r\n * إنشاء مجمع سكني جديد\r\n */ const createComplex = async (complex)=>{\n    try {\n        // إنشاء المعرف الفريد\n        const id = generateUniqueId();\n        const newComplex = {\n            id,\n            name: complex.name,\n            location: complex.location,\n            description: complex.description,\n            buildings: [],\n            sharedFacilities: [],\n            created_at: new Date().toISOString()\n        };\n        // إرسال طلب لحفظ المجمع السكني في قاعدة البيانات\n        const response = await fetch('/api/housing', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: newComplex.id,\n                name: newComplex.name,\n                location: newComplex.location,\n                description: newComplex.description\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"فشل في حفظ المجمع السكني: \".concat(response.statusText));\n        }\n        // إضافة المجمع إلى المصفوفة المحلية\n        residentialComplexes.push(newComplex);\n        return newComplex;\n    } catch (error) {\n        console.error('خطأ في إنشاء المجمع السكني:', error);\n        throw error;\n    }\n};\n/**\r\n * تحديث مجمع سكني\r\n */ const updateComplex = (id, updates)=>{\n    const complexIndex = residentialComplexes.findIndex((complex)=>complex.id === id);\n    if (complexIndex === -1) {\n        return undefined;\n    }\n    const updatedComplex = {\n        ...residentialComplexes[complexIndex],\n        ...updates\n    };\n    residentialComplexes[complexIndex] = updatedComplex;\n    return updatedComplex;\n};\n/**\r\n * حذف مجمع سكني\r\n */ const deleteComplex = (id)=>{\n    const initialLength = residentialComplexes.length;\n    residentialComplexes = residentialComplexes.filter((complex)=>complex.id !== id);\n    return residentialComplexes.length < initialLength;\n};\n/**\r\n * إضافة مبنى لمجمع سكني\r\n */ const addBuildingToComplex = async (complexId, building)=>{\n    try {\n        const complex = getComplexById(complexId);\n        if (!complex) {\n            return undefined;\n        }\n        // إنشاء المعرف الفريد\n        const id = generateUniqueId();\n        const newBuilding = {\n            id,\n            name: building.name,\n            floors: [],\n            address: building.address,\n            description: building.description,\n            floors_count: 0,\n            complex_id: complexId\n        };\n        // إرسال طلب لحفظ المبنى في قاعدة البيانات\n        const response = await fetch('/api/housing/buildings', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: newBuilding.id,\n                complex_id: complexId,\n                name: newBuilding.name,\n                floors: 0,\n                description: newBuilding.description,\n                address: newBuilding.address\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"فشل في حفظ المبنى: \".concat(response.statusText));\n        }\n        // إضافة المبنى إلى المصفوفة المحلية\n        complex.buildings.push(newBuilding);\n        return newBuilding;\n    } catch (error) {\n        console.error('خطأ في إضافة المبنى:', error);\n        throw error;\n    }\n};\n/**\r\n * الحصول على مبنى بواسطة المعرف\r\n */ const getBuildingById = (complexId, buildingId)=>{\n    const complex = getComplexById(complexId);\n    if (!complex) return undefined;\n    return complex.buildings.find((building)=>building.id === buildingId);\n};\n/**\r\n * إضافة طابق لمبنى\r\n */ const addFloorToBuilding = async (complexId, buildingId, floorNumber)=>{\n    try {\n        const building = getBuildingById(complexId, buildingId);\n        if (!building) {\n            return undefined;\n        }\n        // التحقق من عدم وجود طابق بنفس الرقم\n        if (building.floors.some((floor)=>floor.number === floorNumber)) {\n            return undefined;\n        }\n        // إنشاء المعرف الفريد\n        const id = generateUniqueId();\n        const newFloor = {\n            id,\n            number: floorNumber,\n            rooms: [],\n            services: []\n        };\n        // إرسال طلب لحفظ الطابق في قاعدة البيانات\n        await fetch('/api/housing/floors', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: newFloor.id,\n                building_id: buildingId,\n                number: floorNumber\n            })\n        });\n        // تحديث عدد الطوابق في المبنى في قاعدة البيانات\n        await fetch('/api/housing/buildings', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: buildingId,\n                floors: building.floors.length + 1\n            })\n        });\n        // إضافة الطابق إلى المصفوفة المحلية\n        building.floors.push(newFloor);\n        building.floors_count = building.floors.length;\n        // ترتيب الطوابق تصاعدياً حسب الرقم\n        building.floors.sort((a, b)=>a.number - b.number);\n        return newFloor;\n    } catch (error) {\n        console.error('خطأ في إضافة الطابق:', error);\n        throw error;\n    }\n};\n/**\r\n * الحصول على طابق بواسطة الرقم\r\n */ const getFloorByNumber = (complexId, buildingId, floorNumber)=>{\n    const building = getBuildingById(complexId, buildingId);\n    if (!building) return undefined;\n    return building.floors.find((floor)=>floor.number === floorNumber);\n};\n/**\r\n * إضافة غرفة لطابق\r\n */ const addRoomToFloor = async (complexId, buildingId, floorNumber, room)=>{\n    try {\n        const floor = getFloorByNumber(complexId, buildingId, floorNumber);\n        if (!floor) {\n            return undefined;\n        }\n        // التحقق من عدم وجود غرفة بنفس الرقم\n        if (floor.rooms.some((existingRoom)=>existingRoom.room_number === room.room_number)) {\n            return undefined;\n        }\n        // إنشاء المعرف الفريد\n        const id = generateUniqueId();\n        const newRoom = {\n            id,\n            name: room.name,\n            room_number: room.room_number,\n            type: room.type,\n            status: room.status,\n            area: room.area,\n            hasBalcony: room.hasBalcony,\n            services: []\n        };\n        // إرسال طلب لحفظ الغرفة في قاعدة البيانات\n        await fetch('/api/housing/rooms', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: newRoom.id,\n                building_id: buildingId,\n                floor_number: floorNumber,\n                name: newRoom.name,\n                room_number: newRoom.room_number,\n                type: newRoom.type,\n                status: newRoom.status,\n                area: newRoom.area,\n                has_balcony: newRoom.hasBalcony\n            })\n        });\n        // إضافة الغرفة إلى المصفوفة المحلية\n        floor.rooms.push(newRoom);\n        return newRoom;\n    } catch (error) {\n        console.error('خطأ في إضافة الغرفة:', error);\n        throw error;\n    }\n};\n/**\r\n * إضافة خدمة لطابق\r\n */ const addServiceToFloor = async (complexId, buildingId, floorNumber, service)=>{\n    try {\n        const floor = getFloorByNumber(complexId, buildingId, floorNumber);\n        if (!floor) {\n            return undefined;\n        }\n        // إنشاء المعرف الفريد\n        const id = generateUniqueId();\n        const newService = {\n            id,\n            name: service.name,\n            type: service.type,\n            location: service.location,\n            description: service.description\n        };\n        // إرسال طلب لحفظ الخدمة في قاعدة البيانات\n        await fetch('/api/housing/services', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: newService.id,\n                building_id: buildingId,\n                floor_number: floorNumber,\n                room_number: null,\n                name: newService.name,\n                type: newService.type,\n                location: newService.location,\n                description: newService.description\n            })\n        });\n        // إضافة الخدمة إلى المصفوفة المحلية\n        floor.services.push(newService);\n        return newService;\n    } catch (error) {\n        console.error('خطأ في إضافة الخدمة للطابق:', error);\n        throw error;\n    }\n};\n/**\r\n * إضافة خدمة لغرفة\r\n */ const addServiceToRoom = async (complexId, buildingId, floorNumber, roomNumber, service)=>{\n    try {\n        const floor = getFloorByNumber(complexId, buildingId, floorNumber);\n        if (!floor) return undefined;\n        const room = floor.rooms.find((room)=>room.room_number === roomNumber);\n        if (!room) return undefined;\n        if (!room.services) {\n            room.services = [];\n        }\n        // إنشاء المعرف الفريد\n        const id = generateUniqueId();\n        const newService = {\n            id,\n            name: service.name,\n            type: service.type,\n            location: service.location,\n            description: service.description\n        };\n        // إرسال طلب لحفظ الخدمة في قاعدة البيانات\n        await fetch('/api/housing/services', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: newService.id,\n                building_id: buildingId,\n                floor_number: floorNumber,\n                room_number: roomNumber,\n                name: newService.name,\n                type: newService.type,\n                location: newService.location,\n                description: newService.description\n            })\n        });\n        // إضافة الخدمة إلى المصفوفة المحلية\n        room.services.push(newService);\n        return newService;\n    } catch (error) {\n        console.error('خطأ في إضافة الخدمة للغرفة:', error);\n        throw error;\n    }\n};\n/**\r\n * دالة مساعدة لإنشاء معرفات فريدة\r\n */ const generateUniqueId = ()=>{\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n};\n/**\r\n * استيراد بيانات المجمعات السكنية من وحدات API خارجية\r\n */ const importComplexesFromAPI = async ()=>{\n    try {\n        const response = await fetch('/api/housing');\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب المجمعات السكنية: \".concat(response.statusText));\n        }\n        const apiComplexes = await response.json();\n        // تحويل البيانات من النموذج القديم إلى النموذج الجديد\n        const transformedComplexes = [];\n        for (const apiComplex of apiComplexes){\n            const complex = {\n                id: apiComplex.id,\n                name: apiComplex.name,\n                location: apiComplex.location,\n                description: apiComplex.description,\n                created_at: apiComplex.created_at,\n                buildings: [],\n                sharedFacilities: []\n            };\n            // استيراد المباني\n            try {\n                const buildingsResponse = await fetch(\"/api/housing/buildings?complexId=\".concat(complex.id));\n                if (buildingsResponse.ok) {\n                    const apiBuildings = await buildingsResponse.json();\n                    for (const apiBuilding of apiBuildings){\n                        const building = {\n                            id: apiBuilding.id,\n                            name: apiBuilding.name,\n                            complex_id: apiBuilding.complex_id,\n                            floors_count: apiBuilding.floors,\n                            description: apiBuilding.description,\n                            address: apiBuilding.address,\n                            floors: []\n                        };\n                        // استيراد الطوابق\n                        try {\n                            const floorsResponse = await fetch(\"/api/housing/floors?buildingId=\".concat(building.id));\n                            if (floorsResponse.ok) {\n                                const apiFloors = await floorsResponse.json();\n                                for (const apiFloor of apiFloors){\n                                    const floor = {\n                                        id: apiFloor.id,\n                                        number: apiFloor.number,\n                                        rooms: [],\n                                        services: []\n                                    };\n                                    // استيراد الغرف للطابق\n                                    try {\n                                        const roomsResponse = await fetch(\"/api/housing/rooms?buildingId=\".concat(building.id, \"&floorNumber=\").concat(floor.number));\n                                        if (roomsResponse.ok) {\n                                            const apiRooms = await roomsResponse.json();\n                                            for (const apiRoom of apiRooms){\n                                                const room = {\n                                                    id: apiRoom.id,\n                                                    name: apiRoom.name,\n                                                    room_number: apiRoom.room_number,\n                                                    type: apiRoom.type,\n                                                    status: apiRoom.status,\n                                                    area: apiRoom.area,\n                                                    hasBalcony: apiRoom.has_balcony,\n                                                    services: []\n                                                };\n                                                // استيراد الخدمات للغرفة\n                                                try {\n                                                    const servicesResponse = await fetch(\"/api/housing/services?roomId=\".concat(room.id));\n                                                    if (servicesResponse.ok) {\n                                                        const apiServices = await servicesResponse.json();\n                                                        room.services = apiServices.map((apiService)=>({\n                                                                id: apiService.id,\n                                                                name: apiService.name,\n                                                                type: apiService.type,\n                                                                location: apiService.location,\n                                                                description: apiService.description\n                                                            }));\n                                                    }\n                                                } catch (error) {\n                                                    console.error(\"فشل في استيراد خدمات الغرفة \".concat(room.name, \":\"), error);\n                                                }\n                                                floor.rooms.push(room);\n                                            }\n                                        }\n                                    } catch (error) {\n                                        console.error(\"فشل في استيراد غرف الطابق \".concat(floor.number, \":\"), error);\n                                    }\n                                    // استيراد الخدمات للطابق\n                                    try {\n                                        const servicesResponse = await fetch(\"/api/housing/services?floorId=\".concat(floor.id));\n                                        if (servicesResponse.ok) {\n                                            const apiServices = await servicesResponse.json();\n                                            floor.services = apiServices.map((apiService)=>({\n                                                    id: apiService.id,\n                                                    name: apiService.name,\n                                                    type: apiService.type,\n                                                    location: apiService.location,\n                                                    description: apiService.description\n                                                }));\n                                        }\n                                    } catch (error) {\n                                        console.error(\"فشل في استيراد خدمات الطابق \".concat(floor.number, \":\"), error);\n                                    }\n                                    building.floors.push(floor);\n                                }\n                                // ترتيب الطوابق تصاعدياً حسب الرقم\n                                building.floors.sort((a, b)=>a.number - b.number);\n                            }\n                        } catch (error) {\n                            console.error(\"فشل في استيراد طوابق المبنى \".concat(building.name, \":\"), error);\n                            // إنشاء طوابق افتراضية بناءً على عدد الطوابق في المبنى\n                            for(let i = 1; i <= apiBuilding.floors; i++){\n                                const floor = {\n                                    id: generateUniqueId(),\n                                    number: i,\n                                    rooms: [],\n                                    services: []\n                                };\n                                building.floors.push(floor);\n                            }\n                        }\n                        complex.buildings.push(building);\n                    }\n                }\n            } catch (error) {\n                console.error(\"فشل في استيراد المباني للمجمع \".concat(complex.name, \":\"), error);\n            }\n            transformedComplexes.push(complex);\n        }\n        // تحديث المصفوفة الرئيسية\n        residentialComplexes = transformedComplexes;\n    } catch (error) {\n        console.error('فشل في استيراد المجمعات السكنية:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/complexManagementService.ts\n"));

/***/ })

});