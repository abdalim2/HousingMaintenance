"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/housing/page",{

/***/ "(app-pages-browser)/./src/lib/services/housingService.ts":
/*!********************************************!*\
  !*** ./src/lib/services/housingService.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBuilding: () => (/* binding */ createBuilding),\n/* harmony export */   createComplex: () => (/* binding */ createComplex),\n/* harmony export */   deleteBuilding: () => (/* binding */ deleteBuilding),\n/* harmony export */   deleteComplex: () => (/* binding */ deleteComplex),\n/* harmony export */   getBuildingById: () => (/* binding */ getBuildingById),\n/* harmony export */   getBuildings: () => (/* binding */ getBuildings),\n/* harmony export */   getComplexById: () => (/* binding */ getComplexById),\n/* harmony export */   getComplexes: () => (/* binding */ getComplexes),\n/* harmony export */   getFacilities: () => (/* binding */ getFacilities),\n/* harmony export */   getRooms: () => (/* binding */ getRooms),\n/* harmony export */   testDatabaseConnection: () => (/* binding */ testDatabaseConnection),\n/* harmony export */   updateBuilding: () => (/* binding */ updateBuilding),\n/* harmony export */   updateComplex: () => (/* binding */ updateComplex)\n/* harmony export */ });\n// Residential Complex Operations\nconst getComplexes = async ()=>{\n    try {\n        const response = await fetch('/api/housing');\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب المجمعات السكنية: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('فشل في جلب المجمعات السكنية:', error);\n        throw error;\n    }\n};\nconst getComplexById = async (id)=>{\n    try {\n        const response = await fetch(\"/api/housing/\".concat(id));\n        if (response.status === 404) {\n            return null;\n        }\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب المجمع السكني: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"فشل في جلب المجمع السكني بالمعرف \".concat(id, \":\"), error);\n        throw error;\n    }\n};\nconst createComplex = async (complex)=>{\n    console.log('محاولة إنشاء مجمع سكني جديد:', complex);\n    try {\n        // التحقق من وجود الحقول المطلوبة\n        if (!complex.name || !complex.location) {\n            throw new Error('اسم المجمع والموقع مطلوبان');\n        }\n        const response = await fetch('/api/housing', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(complex)\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"فشل في إنشاء المجمع السكني: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        console.log('تم إنشاء المجمع بنجاح:', data);\n        return data;\n    } catch (err) {\n        console.error('خطأ غير متوقع عند إنشاء المجمع:', err);\n        throw err;\n    }\n};\nconst updateComplex = async (id, updates)=>{\n    try {\n        const response = await fetch('/api/housing', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id,\n                ...updates\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"فشل في تحديث المجمع السكني: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"فشل في تحديث المجمع السكني بالمعرف \".concat(id, \":\"), error);\n        throw error;\n    }\n};\nconst deleteComplex = async (id)=>{\n    try {\n        const response = await fetch(\"/api/housing?id=\".concat(id), {\n            method: 'DELETE'\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"فشل في حذف المجمع السكني: \".concat(response.statusText));\n        }\n    } catch (error) {\n        console.error(\"فشل في حذف المجمع السكني بالمعرف \".concat(id, \":\"), error);\n        throw error;\n    }\n};\nconst testDatabaseConnection = async ()=>{\n    try {\n        const response = await fetch('/api/housing', {\n            method: 'OPTIONS'\n        });\n        if (!response.ok) {\n            return false;\n        }\n        const data = await response.json();\n        return data.success;\n    } catch (error) {\n        console.error('فشل في اختبار الاتصال بقاعدة البيانات:', error);\n        return false;\n    }\n};\n// Building Operations\nconst getBuildings = async (complexId)=>{\n    try {\n        const url = complexId ? \"/api/housing/buildings?complexId=\".concat(complexId) : '/api/housing/buildings';\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب المباني: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('فشل في جلب المباني:', error);\n        throw error;\n    }\n};\nconst getBuildingById = async (id)=>{\n    try {\n        const response = await fetch(\"/api/housing/buildings/\".concat(id));\n        if (response.status === 404) {\n            return null;\n        }\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب المبنى: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"فشل في جلب المبنى بالمعرف \".concat(id, \":\"), error);\n        throw error;\n    }\n};\nconst createBuilding = async (building)=>{\n    try {\n        const response = await fetch('/api/housing/buildings', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(building)\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"فشل في إنشاء المبنى: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('فشل في إنشاء مبنى جديد:', error);\n        throw error;\n    }\n};\nconst updateBuilding = async (id, updates)=>{\n    try {\n        const response = await fetch('/api/housing/buildings', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id,\n                ...updates\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"فشل في تحديث المبنى: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"فشل في تحديث المبنى بالمعرف \".concat(id, \":\"), error);\n        throw error;\n    }\n};\nconst deleteBuilding = async (id)=>{\n    try {\n        const response = await fetch(\"/api/housing/buildings?id=\".concat(id), {\n            method: 'DELETE'\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"فشل في حذف المبنى: \".concat(response.statusText));\n        }\n    } catch (error) {\n        console.error(\"فشل في حذف المبنى بالمعرف \".concat(id, \":\"), error);\n        throw error;\n    }\n};\n// Room Operations\nconst getRooms = async (buildingId)=>{\n    try {\n        const url = buildingId ? \"/api/housing/rooms?buildingId=\".concat(buildingId) : '/api/housing/rooms';\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب الغرف: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('فشل في جلب الغرف:', error);\n        throw error;\n    }\n};\n// Facility Operations\nconst getFacilities = async (complexId, buildingId)=>{\n    try {\n        let url = '/api/housing/facilities';\n        const params = new URLSearchParams();\n        if (complexId) params.append('complexId', complexId);\n        if (buildingId) params.append('buildingId', buildingId);\n        if (params.toString()) {\n            url += \"?\".concat(params.toString());\n        }\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"فشل في جلب المرافق: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('فشل في جلب المرافق:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/housingService.ts\n"));

/***/ })

});