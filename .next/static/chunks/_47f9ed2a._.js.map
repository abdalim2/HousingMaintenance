{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["'use server';\r\n\r\nimport { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nexport const pool = new Pool({\r\n  connectionString,\r\n  max: 20, // زيادة عدد الاتصالات المتزامنة\r\n  idleTimeoutMillis: 30000, // وقت انتظار أطول\r\n  connectionTimeoutMillis: 5000, // مهلة اتصال أقصر\r\n});\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات مع إعادة المحاولة\r\nexport async function query(text: string, params?: any[], retries = 3) {\r\n  let lastError;\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    const client = await pool.connect().catch(err => {\r\n      console.error(`فشل الاتصال بقاعدة البيانات (محاولة ${attempt + 1}/${retries}):`, err.message);\r\n      return null;\r\n    });\r\n    \r\n    if (!client) {\r\n      lastError = new Error('تعذر إنشاء اتصال بقاعدة البيانات');\r\n      continue;\r\n    }\r\n    \r\n    try {\r\n      const result = await client.query(text, params);\r\n      return result;\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`فشل الاستعلام (محاولة ${attempt + 1}/${retries}):`, error.message);\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n  \r\n  // إذا وصلنا إلى هنا، فقد فشلت جميع المحاولات\r\n  throw lastError || new Error('فشل الاستعلام بعد عدة محاولات');\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()', [], 1);\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// وظيفة مساعدة للحصول على بيانات آمنة\r\nexport async function safeQuery(text: string, params?: any[], defaultValue: any = []) {\r\n  try {\r\n    const result = await query(text, params);\r\n    return result.rows || defaultValue;\r\n  } catch (error) {\r\n    console.error('فشل الاستعلام، استخدام القيمة الافتراضية:', error);\r\n    return defaultValue;\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IAgBsB,QAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["'use server';\r\n\r\nimport { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nexport const pool = new Pool({\r\n  connectionString,\r\n  max: 20, // زيادة عدد الاتصالات المتزامنة\r\n  idleTimeoutMillis: 30000, // وقت انتظار أطول\r\n  connectionTimeoutMillis: 5000, // مهلة اتصال أقصر\r\n});\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات مع إعادة المحاولة\r\nexport async function query(text: string, params?: any[], retries = 3) {\r\n  let lastError;\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    const client = await pool.connect().catch(err => {\r\n      console.error(`فشل الاتصال بقاعدة البيانات (محاولة ${attempt + 1}/${retries}):`, err.message);\r\n      return null;\r\n    });\r\n    \r\n    if (!client) {\r\n      lastError = new Error('تعذر إنشاء اتصال بقاعدة البيانات');\r\n      continue;\r\n    }\r\n    \r\n    try {\r\n      const result = await client.query(text, params);\r\n      return result;\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`فشل الاستعلام (محاولة ${attempt + 1}/${retries}):`, error.message);\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n  \r\n  // إذا وصلنا إلى هنا، فقد فشلت جميع المحاولات\r\n  throw lastError || new Error('فشل الاستعلام بعد عدة محاولات');\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()', [], 1);\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// وظيفة مساعدة للحصول على بيانات آمنة\r\nexport async function safeQuery(text: string, params?: any[], defaultValue: any = []) {\r\n  try {\r\n    const result = await query(text, params);\r\n    return result.rows || defaultValue;\r\n  } catch (error) {\r\n    console.error('فشل الاستعلام، استخدام القيمة الافتراضية:', error);\r\n    return defaultValue;\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IAyDsB,YAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/maintenanceService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { MaintenanceRequest, MaintenanceItem } from '@/models/types';\r\n\r\n// Maintenance Request Operations\r\nexport const getMaintenanceRequests = async (\r\n  complexId?: string, \r\n  buildingId?: string, \r\n  status?: MaintenanceRequest['status']\r\n): Promise<MaintenanceRequest[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM maintenance_requests WHERE 1=1';\r\n    const params: any[] = [];\r\n    \r\n    if (complexId) {\r\n      params.push(complexId);\r\n      sql += ` AND complex_id = $${params.length}`;\r\n    }\r\n    \r\n    if (buildingId) {\r\n      params.push(buildingId);\r\n      sql += ` AND building_id = $${params.length}`;\r\n    }\r\n    \r\n    if (status) {\r\n      params.push(status);\r\n      sql += ` AND status = $${params.length}`;\r\n    }\r\n    \r\n    sql += ' ORDER BY reported_date DESC';\r\n    \r\n    return await safeQuery(sql, params, []);\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceRequests:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getMaintenanceRequestById = async (id: string): Promise<MaintenanceRequest | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM maintenance_requests WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceRequestById:', err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createMaintenanceRequest = async (\r\n  request: Omit<MaintenanceRequest, 'id' | 'reported_date'>\r\n): Promise<MaintenanceRequest> => {\r\n  try {\r\n    const newRequest = {\r\n      ...request,\r\n      reported_date: new Date().toISOString(),\r\n      status: request.status || 'pending'\r\n    };\r\n    \r\n    const fields = Object.keys(newRequest).join(', ');\r\n    const placeholders = Object.keys(newRequest).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(newRequest);\r\n    \r\n    const sql = `\r\n      INSERT INTO maintenance_requests (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createMaintenanceRequest:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateMaintenanceRequest = async (\r\n  id: string, \r\n  updates: Partial<MaintenanceRequest>\r\n): Promise<MaintenanceRequest> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE maintenance_requests \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateMaintenanceRequest:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteMaintenanceRequest = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM maintenance_requests WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteMaintenanceRequest:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Maintenance Items Operations\r\nexport const getMaintenanceItems = async (\r\n  maintenanceId: string\r\n): Promise<MaintenanceItem[]> => {\r\n  try {\r\n    const result = await query('SELECT * FROM maintenance_items WHERE maintenance_id = $1', [maintenanceId]);\r\n    return result.rows || [];\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getMaintenanceItemById = async (id: string): Promise<MaintenanceItem | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM maintenance_items WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createMaintenanceItem = async (\r\n  item: Omit<MaintenanceItem, 'id'>\r\n): Promise<MaintenanceItem> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO maintenance_items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createMaintenanceItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateMaintenanceItem = async (\r\n  id: string, \r\n  updates: Partial<MaintenanceItem>\r\n): Promise<MaintenanceItem> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE maintenance_items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateMaintenanceItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteMaintenanceItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM maintenance_items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteMaintenanceItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Get maintenance requests for monthly summary\r\nexport const getMonthlyMaintenanceRequests = async (\r\n  year: number,\r\n  month: number\r\n): Promise<MaintenanceRequest[]> => {\r\n  try {\r\n    // Create start and end date for the specified month\r\n    const startDate = new Date(year, month - 1, 1).toISOString();\r\n    const endDate = new Date(year, month, 0).toISOString();\r\n    \r\n    const sql = `\r\n      SELECT * FROM maintenance_requests\r\n      WHERE reported_date >= $1 AND reported_date <= $2\r\n    `;\r\n    \r\n    return await safeQuery(sql, [startDate, endDate], []);\r\n  } catch (err) {\r\n    console.error('Error in getMonthlyMaintenanceRequests:', err);\r\n    return [];\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/inventoryService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { Category, Item, Inventory } from '@/models/types';\r\n\r\n// Category Operations\r\nexport const getCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    return await safeQuery('SELECT * FROM categories', [], []);\r\n  } catch (err) {\r\n    console.error('Error in getCategories:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (id: string): Promise<Category | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM categories WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getCategoryById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createCategory = async (category: Omit<Category, 'id'>): Promise<Category> => {\r\n  try {\r\n    const fields = Object.keys(category).join(', ');\r\n    const placeholders = Object.keys(category).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(category);\r\n    \r\n    const sql = `\r\n      INSERT INTO categories (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateCategory = async (id: string, updates: Partial<Category>): Promise<Category> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE categories \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteCategory = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM categories WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Item Operations\r\nexport const getItems = async (categoryId?: string): Promise<Item[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM items';\r\n    const params: any[] = [];\r\n    \r\n    if (categoryId) {\r\n      params.push(categoryId);\r\n      sql += ' WHERE category_id = $1';\r\n    }\r\n    \r\n    const result = await query(sql, params);\r\n    return result.rows || [];\r\n  } catch (err) {\r\n    console.error('Error in getItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getItemById = async (id: string): Promise<Item | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM items WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createItem = async (item: Omit<Item, 'id'>): Promise<Item> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateItem = async (id: string, updates: Partial<Item>): Promise<Item> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Inventory Operations\r\nexport const getInventory = async (itemId?: string): Promise<Inventory[]> => {\r\n  try {\r\n    let sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name as item_name, \r\n             it.category_id, \r\n             it.unit\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n    `;\r\n    \r\n    const params: any[] = [];\r\n    if (itemId) {\r\n      params.push(itemId);\r\n      sql += ' WHERE i.item_id = $1';\r\n    }\r\n    \r\n    const rows = await safeQuery(sql, params, []);\r\n    \r\n    // Format the result to match the expected structure\r\n    return rows.map((row: {\r\n      id: string;\r\n      item_id: string;\r\n      item_name: string;\r\n      category_id: string;\r\n      unit: string;\r\n      quantity: number;\r\n      last_updated: string;\r\n    }) => ({\r\n      ...row,\r\n      items: {\r\n      id: row.item_id,\r\n      name: row.item_name,\r\n      category_id: row.category_id,\r\n      unit: row.unit\r\n      }\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getInventory:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getInventoryItemById = async (id: string): Promise<Inventory | null> => {\r\n  try {\r\n    const sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name as item_name, \r\n             it.category_id, \r\n             it.unit\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n      WHERE i.id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [id]);\r\n    \r\n    if (result.rows.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Format the result to match the expected structure\r\n    const row = result.rows[0];\r\n    return {\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    };\r\n  } catch (err) {\r\n    console.error('Error in getInventoryItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateInventoryQuantity = async (\r\n  itemId: string, \r\n  quantityChange: number\r\n): Promise<Inventory> => {\r\n  try {\r\n    // First, get the current inventory item\r\n    const currentInventoryResult = await query(\r\n      'SELECT * FROM inventory WHERE item_id = $1',\r\n      [itemId]\r\n    );\r\n    \r\n    const currentInventory = currentInventoryResult.rows[0];\r\n    \r\n    // If inventory item exists, update it\r\n    if (currentInventory) {\r\n      const newQuantity = currentInventory.quantity + quantityChange;\r\n      \r\n      if (newQuantity < 0) {\r\n        throw new Error('Insufficient inventory quantity');\r\n      }\r\n      \r\n      const result = await query(\r\n        'UPDATE inventory SET quantity = $1, last_updated = $2 WHERE id = $3 RETURNING *',\r\n        [newQuantity, new Date().toISOString(), currentInventory.id]\r\n      );\r\n      \r\n      return result.rows[0];\r\n    } \r\n    // If inventory item does not exist, create it (only if adding quantity)\r\n    else if (quantityChange > 0) {\r\n      const result = await query(\r\n        'INSERT INTO inventory (item_id, quantity, last_updated) VALUES ($1, $2, $3) RETURNING *',\r\n        [itemId, quantityChange, new Date().toISOString()]\r\n      );\r\n      \r\n      return result.rows[0];\r\n    } else {\r\n      throw new Error('Cannot reduce quantity of non-existent inventory item');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error in updateInventoryQuantity:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateInventoryItem = async (\r\n  id: string, \r\n  updates: Partial<Inventory>\r\n): Promise<Inventory> => {\r\n  try {\r\n    const updateData = {\r\n      ...updates,\r\n      last_updated: new Date().toISOString()\r\n    };\r\n    \r\n    const fields = Object.keys(updateData);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updateData), id];\r\n    \r\n    const result = await query(\r\n      `UPDATE inventory SET ${setClause} WHERE id = $${fields.length + 1} RETURNING *`,\r\n      values\r\n    );\r\n    \r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateInventoryItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getLowStockItems = async (threshold: number = 10): Promise<{ id: string; item_id: string; quantity: number; last_updated: string; name: string; category: string; unit: string }[]> => {\r\n  try {\r\n    const sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name, \r\n             it.category_id, \r\n             it.unit,\r\n             c.name as category\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n      LEFT JOIN categories c ON it.category_id = c.id\r\n      WHERE i.quantity <= $1\r\n    `;\r\n    \r\n    const rows = await safeQuery(sql, [threshold], []);\r\n    \r\n    // Format the result to match the expected structure\r\n    return rows.map((row: { id: string; item_id: string; quantity: number; last_updated: string; name: string; category: string; unit: string }) => ({\r\n      id: row.id,\r\n      item_id: row.item_id,\r\n      quantity: row.quantity,\r\n      last_updated: row.last_updated,\r\n      name: row.name,\r\n      category: row.category,\r\n      unit: row.unit\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getLowStockItems:', err);\r\n    return [];\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 560, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/purchaseService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { PurchaseOrder, PurchaseItem } from '@/models/types';\r\n\r\n// Purchase Order Operations\r\nexport const getPurchaseOrders = async (\r\n  status?: PurchaseOrder['status']\r\n): Promise<PurchaseOrder[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM purchase_orders WHERE 1=1';\r\n    const params: any[] = [];\r\n    \r\n    if (status) {\r\n      params.push(status);\r\n      sql += ` AND status = $${params.length}`;\r\n    }\r\n    \r\n    sql += ' ORDER BY order_date DESC';\r\n    \r\n    return await safeQuery(sql, params, []);\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseOrders:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getPurchaseOrderById = async (id: string): Promise<PurchaseOrder | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM purchase_orders WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseOrderById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createPurchaseOrder = async (\r\n  order: Omit<PurchaseOrder, 'id' | 'order_date'>\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    const newOrder = {\r\n      ...order,\r\n      order_date: new Date().toISOString(),\r\n      status: order.status || 'draft'\r\n    };\r\n    \r\n    const fields = Object.keys(newOrder).join(', ');\r\n    const placeholders = Object.keys(newOrder).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(newOrder);\r\n    \r\n    const sql = `\r\n      INSERT INTO purchase_orders (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createPurchaseOrder:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updatePurchaseOrder = async (\r\n  id: string, \r\n  updates: Partial<PurchaseOrder>\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE purchase_orders \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updatePurchaseOrder:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deletePurchaseOrder = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM purchase_orders WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deletePurchaseOrder:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Purchase Items Operations\r\nexport const getPurchaseItems = async (\r\n  purchaseOrderId: string\r\n): Promise<PurchaseItem[]> => {\r\n  try {\r\n    const sql = `\r\n      SELECT pi.*, \r\n             i.id as item_id, \r\n             i.name as item_name, \r\n             i.category_id, \r\n             i.unit\r\n      FROM purchase_items pi\r\n      LEFT JOIN items i ON pi.item_id = i.id\r\n      WHERE pi.purchase_order_id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [purchaseOrderId]);\r\n    \r\n    // Format the result to match the expected structure\r\n    return result.rows.map(row => ({\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getPurchaseItemById = async (id: string): Promise<PurchaseItem | null> => {\r\n  try {\r\n    const sql = `\r\n      SELECT pi.*, \r\n             i.id as item_id, \r\n             i.name as item_name, \r\n             i.category_id, \r\n             i.unit\r\n      FROM purchase_items pi\r\n      LEFT JOIN items i ON pi.item_id = i.id\r\n      WHERE pi.id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [id]);\r\n    \r\n    if (result.rows.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Format the result to match the expected structure\r\n    const row = result.rows[0];\r\n    return {\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    };\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createPurchaseItem = async (\r\n  item: Omit<PurchaseItem, 'id'>\r\n): Promise<PurchaseItem> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO purchase_items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createPurchaseItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updatePurchaseItem = async (\r\n  id: string, \r\n  updates: Partial<PurchaseItem>\r\n): Promise<PurchaseItem> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE purchase_items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updatePurchaseItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deletePurchaseItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM purchase_items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deletePurchaseItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Generate Monthly Purchase Orders\r\nexport const generateMonthlyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    // 1. Get all maintenance requests for the month\r\n    const startDate = new Date(year, month - 1, 1).toISOString();\r\n    const endDate = new Date(year, month, 0).toISOString();\r\n    \r\n    // Get all maintenance requests for the specified month first\r\n    let result;\r\n    try {\r\n      result = await query(\r\n        'SELECT id FROM maintenance_requests WHERE reported_date >= $1 AND reported_date <= $2',\r\n        [startDate, endDate]\r\n      );\r\n    } catch (err: any) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (err.message.includes('does not exist')) {\r\n        console.warn('Maintenance requests table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw err;\r\n    }\r\n    \r\n    const maintenanceRequests = result.rows;\r\n    \r\n    if (!maintenanceRequests || maintenanceRequests.length === 0) {\r\n      console.log('No maintenance requests found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // Get maintenance items for these requests\r\n    const maintenanceIds = maintenanceRequests.map(req => req.id);\r\n    const placeholders = maintenanceIds.map((_, i) => `$${i + 1}`).join(',');\r\n    \r\n    let itemsResult;\r\n    try {\r\n      itemsResult = await query(\r\n        `SELECT * FROM maintenance_items WHERE maintenance_id IN (${placeholders})`,\r\n        maintenanceIds\r\n      );\r\n    } catch (err: any) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (err.message.includes('does not exist')) {\r\n        console.warn('Maintenance items table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw err;\r\n    }\r\n    \r\n    const maintenanceItems = itemsResult.rows;\r\n    \r\n    if (!maintenanceItems || maintenanceItems.length === 0) {\r\n      console.log('No maintenance items found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // 2. Group items by item_id and sum quantities\r\n    const itemQuantities: Record<string, number> = {};\r\n    \r\n    maintenanceItems.forEach(item => {\r\n      if (!itemQuantities[item.item_id]) {\r\n        itemQuantities[item.item_id] = 0;\r\n      }\r\n      itemQuantities[item.item_id] += item.quantity_needed;\r\n    });\r\n    \r\n    // 3. Create a new purchase order\r\n    const newOrder = {\r\n      order_date: new Date().toISOString(),\r\n      status: 'draft',\r\n      created_by: createdBy,\r\n      notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')}`\r\n    };\r\n    \r\n    const orderFields = Object.keys(newOrder).join(', ');\r\n    const orderPlaceholders = Object.keys(newOrder).map((_, i) => `$${i + 1}`).join(', ');\r\n    const orderValues = Object.values(newOrder);\r\n    \r\n    const orderResult = await query(\r\n      `INSERT INTO purchase_orders (${orderFields}) VALUES (${orderPlaceholders}) RETURNING *`,\r\n      orderValues\r\n    );\r\n    \r\n    const purchaseOrder = orderResult.rows[0];\r\n    \r\n    // 4. Create purchase items for each item type\r\n    if (Object.keys(itemQuantities).length > 0) {\r\n      const purchaseItems = Object.entries(itemQuantities).map(([itemId, quantity]) => ({\r\n        purchase_order_id: purchaseOrder.id,\r\n        item_id: itemId,\r\n        quantity: quantity\r\n      }));\r\n      \r\n      for (const item of purchaseItems) {\r\n        const itemFields = Object.keys(item).join(', ');\r\n        const itemPlaceholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n        const itemValues = Object.values(item);\r\n        \r\n        await query(\r\n          `INSERT INTO purchase_items (${itemFields}) VALUES (${itemPlaceholders})`,\r\n          itemValues\r\n        );\r\n      }\r\n    }\r\n    \r\n    return purchaseOrder;\r\n  } catch (error: any) {\r\n    console.error('Error generating monthly purchase order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to create an empty purchase order when no maintenance items are found\r\nconst createEmptyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  const newOrder = {\r\n    order_date: new Date().toISOString(),\r\n    status: 'draft',\r\n    created_by: createdBy,\r\n    notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')} (No maintenance items found)`\r\n  };\r\n  \r\n  const fields = Object.keys(newOrder).join(', ');\r\n  const placeholders = Object.keys(newOrder).map((_, i) => `$${i + 1}`).join(', ');\r\n  const values = Object.values(newOrder);\r\n  \r\n  const result = await query(\r\n    `INSERT INTO purchase_orders (${fields}) VALUES (${placeholders}) RETURNING *`,\r\n    values\r\n  );\r\n  \r\n  return result.rows[0];\r\n};\r\n\r\n// Process Received Items\r\nexport const processReceivedItems = async (\r\n  purchaseOrderId: string, \r\n  receivedItems: Array<{ id: string, received_quantity: number }>\r\n): Promise<void> => {\r\n  try {\r\n    // Process each received item\r\n    for (const item of receivedItems) {\r\n      // 1. Update the purchase item\r\n      const updateItemResult = await query(\r\n        'UPDATE purchase_items SET received_quantity = $1 WHERE id = $2 RETURNING *',\r\n        [item.received_quantity, item.id]\r\n      );\r\n      \r\n      if (updateItemResult.rows.length === 0) {\r\n        throw new Error(`Purchase item with ID ${item.id} not found`);\r\n      }\r\n      \r\n      const purchaseItem = updateItemResult.rows[0];\r\n      \r\n      // 2. Update inventory\r\n      // First, get the current inventory for this item\r\n      const inventoryResult = await query(\r\n        'SELECT * FROM inventory WHERE item_id = $1',\r\n        [purchaseItem.item_id]\r\n      );\r\n      \r\n      const currentInventory = inventoryResult.rows[0];\r\n      \r\n      // If inventory entry exists, update it\r\n      if (currentInventory) {\r\n        await query(\r\n          'UPDATE inventory SET quantity = $1, last_updated = $2 WHERE id = $3',\r\n          [currentInventory.quantity + item.received_quantity, new Date().toISOString(), currentInventory.id]\r\n        );\r\n      } \r\n      // If no inventory entry exists, create one\r\n      else {\r\n        await query(\r\n          'INSERT INTO inventory (item_id, quantity, unit_price, last_updated) VALUES ($1, $2, $3, $4)',\r\n          [purchaseItem.item_id, item.received_quantity, purchaseItem.unit_price, new Date().toISOString()]\r\n        );\r\n      }\r\n    }\r\n    \r\n    // 3. Update the purchase order status to 'received'\r\n    await query(\r\n      'UPDATE purchase_orders SET status = $1 WHERE id = $2',\r\n      ['received', purchaseOrderId]\r\n    );\r\n  } catch (err) {\r\n    console.error('Error in processReceivedItems:', err);\r\n    throw err;\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 928, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}