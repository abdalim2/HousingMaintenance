{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/complexManagementService.ts"],"sourcesContent":["import { \r\n  ResidentialComplex, \r\n  Building, \r\n  Floor, \r\n  Room, \r\n  Service, \r\n  Facility \r\n} from '@/models/types';\r\n\r\n// المصفوفة الرئيسية لتخزين جميع المجمعات السكنية\r\nlet residentialComplexes: ResidentialComplex[] = [];\r\n\r\n/**\r\n * الحصول على جميع المجمعات السكنية\r\n */\r\nexport const getAllComplexes = (): ResidentialComplex[] => {\r\n  return residentialComplexes;\r\n};\r\n\r\n/**\r\n * الحصول على مجمع سكني بواسطة المعرف\r\n */\r\nexport const getComplexById = (id: string): ResidentialComplex | undefined => {\r\n  return residentialComplexes.find(complex => complex.id === id);\r\n};\r\n\r\n/**\r\n * إنشاء مجمع سكني جديد\r\n */\r\nexport const createComplex = async (complex: Omit<ResidentialComplex, 'id' | 'buildings' | 'created_at'>): Promise<ResidentialComplex> => {\r\n  try {\r\n    // إنشاء المعرف الفريد\r\n    const id = generateUniqueId();\r\n    \r\n    const newComplex: ResidentialComplex = {\r\n      id,\r\n      name: complex.name,\r\n      location: complex.location,\r\n      description: complex.description,\r\n      buildings: [],\r\n      sharedFacilities: [],\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    // إرسال طلب لحفظ المجمع السكني في قاعدة البيانات\r\n    const response = await fetch('/api/housing', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        id: newComplex.id,\r\n        name: newComplex.name,\r\n        location: newComplex.location,\r\n        description: newComplex.description,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`فشل في حفظ المجمع السكني: ${response.statusText}`);\r\n    }\r\n    \r\n    // إضافة المجمع إلى المصفوفة المحلية\r\n    residentialComplexes.push(newComplex);\r\n    return newComplex;\r\n  } catch (error) {\r\n    console.error('خطأ في إنشاء المجمع السكني:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * تحديث مجمع سكني\r\n */\r\nexport const updateComplex = (id: string, updates: Partial<ResidentialComplex>): ResidentialComplex | undefined => {\r\n  const complexIndex = residentialComplexes.findIndex(complex => complex.id === id);\r\n  \r\n  if (complexIndex === -1) {\r\n    return undefined;\r\n  }\r\n  \r\n  const updatedComplex = {\r\n    ...residentialComplexes[complexIndex],\r\n    ...updates,\r\n  };\r\n  \r\n  residentialComplexes[complexIndex] = updatedComplex;\r\n  return updatedComplex;\r\n};\r\n\r\n/**\r\n * حذف مجمع سكني\r\n */\r\nexport const deleteComplex = (id: string): boolean => {\r\n  const initialLength = residentialComplexes.length;\r\n  residentialComplexes = residentialComplexes.filter(complex => complex.id !== id);\r\n  return residentialComplexes.length < initialLength;\r\n};\r\n\r\n/**\r\n * إضافة مبنى لمجمع سكني\r\n */\r\nexport const addBuildingToComplex = async (complexId: string, building: Omit<Building, 'id' | 'floors' | 'complex_id'>): Promise<Building | undefined> => {\r\n  try {\r\n    const complex = getComplexById(complexId);\r\n    \r\n    if (!complex) {\r\n      return undefined;\r\n    }\r\n    \r\n    // إرسال طلب لحفظ المبنى في قاعدة البيانات - make sure floors is at least 1\r\n    const response = await fetch('/api/housing/buildings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        complex_id: complexId,\r\n        name: building.name,\r\n        floors: 1, // Default to 1 floor to satisfy database constraint CHECK (floors > 0)\r\n        description: building.description || ''\r\n      }),\r\n    });\r\n\r\n    // التحقق من نجاح الطلب\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.error || `فشل في حفظ المبنى: ${response.statusText}`);\r\n    }\r\n    \r\n    // استخراج بيانات المبنى المضاف من الاستجابة\r\n    const apiBuilding = await response.json();\r\n    \r\n    // إنشاء كائن المبنى بالتنسيق المناسب للتطبيق\r\n    const newBuilding: Building = {\r\n      id: apiBuilding.id,\r\n      name: apiBuilding.name || building.name,\r\n      floors: [],\r\n      floors_count: apiBuilding.floors || 1,\r\n      description: apiBuilding.description || building.description || '',\r\n      complex_id: complexId\r\n    };\r\n    \r\n    // إضافة المبنى إلى المصفوفة المحلية\r\n    complex.buildings.push(newBuilding);\r\n    return newBuilding;\r\n  } catch (error) {\r\n    console.error('خطأ في إضافة المبنى:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * الحصول على مبنى بواسطة المعرف\r\n */\r\nexport const getBuildingById = (complexId: string, buildingId: string): Building | undefined => {\r\n  const complex = getComplexById(complexId);\r\n  if (!complex) return undefined;\r\n  \r\n  return complex.buildings.find(building => building.id === buildingId);\r\n};\r\n\r\n/**\r\n * إضافة طابق لمبنى\r\n */\r\nexport const addFloorToBuilding = async (complexId: string, buildingId: string, floorNumber: number): Promise<Floor | undefined> => {\r\n  try {\r\n    const building = getBuildingById(complexId, buildingId);\r\n    \r\n    if (!building) {\r\n      return undefined;\r\n    }\r\n    \r\n    // التحقق من عدم وجود طابق بنفس الرقم\r\n    if (building.floors.some(floor => floor.number === floorNumber)) {\r\n      return undefined;\r\n    }\r\n    \r\n    // إنشاء المعرف الفريد\r\n    const id = generateUniqueId();\r\n    \r\n    const newFloor: Floor = {\r\n      id,\r\n      number: floorNumber,\r\n      rooms: [],\r\n      services: []\r\n    };\r\n    \r\n    // إرسال طلب لحفظ الطابق في قاعدة البيانات\r\n    await fetch('/api/housing/floors', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        id: newFloor.id,\r\n        building_id: buildingId,\r\n        number: floorNumber\r\n      }),\r\n    });\r\n    \r\n    // تحديث عدد الطوابق في المبنى في قاعدة البيانات\r\n    await fetch('/api/housing/buildings', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        id: buildingId,\r\n        floors: building.floors.length + 1\r\n      }),\r\n    });\r\n    \r\n    // إضافة الطابق إلى المصفوفة المحلية\r\n    building.floors.push(newFloor);\r\n    building.floors_count = building.floors.length;\r\n    \r\n    // ترتيب الطوابق تصاعدياً حسب الرقم\r\n    building.floors.sort((a, b) => a.number - b.number);\r\n    \r\n    return newFloor;\r\n  } catch (error) {\r\n    console.error('خطأ في إضافة الطابق:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * الحصول على طابق بواسطة الرقم\r\n */\r\nexport const getFloorByNumber = (complexId: string, buildingId: string, floorNumber: number): Floor | undefined => {\r\n  const building = getBuildingById(complexId, buildingId);\r\n  if (!building) return undefined;\r\n  \r\n  return building.floors.find(floor => floor.number === floorNumber);\r\n};\r\n\r\n/**\r\n * إضافة غرفة لطابق\r\n */\r\nexport const addRoomToFloor = async (\r\n  complexId: string, \r\n  buildingId: string, \r\n  floorNumber: number, \r\n  room: Omit<Room, 'id' | 'services'>\r\n): Promise<Room | undefined> => {\r\n  try {\r\n    const floor = getFloorByNumber(complexId, buildingId, floorNumber);\r\n    \r\n    if (!floor) {\r\n      return undefined;\r\n    }\r\n    \r\n    // التحقق من عدم وجود غرفة بنفس الرقم\r\n    if (floor.rooms.some(existingRoom => existingRoom.room_number === room.room_number)) {\r\n      return undefined;\r\n    }\r\n    \r\n    // إنشاء المعرف الفريد\r\n    const id = generateUniqueId();\r\n    \r\n    const newRoom: Room = {\r\n      id,\r\n      name: room.name,\r\n      room_number: room.room_number,\r\n      type: room.type,\r\n      status: room.status,\r\n      area: room.area,\r\n      hasBalcony: room.hasBalcony,\r\n      services: []\r\n    };\r\n    \r\n    // إرسال طلب لحفظ الغرفة في قاعدة البيانات\r\n    await fetch('/api/housing/rooms', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        id: newRoom.id,\r\n        building_id: buildingId,\r\n        floor_number: floorNumber,\r\n        name: newRoom.name,\r\n        room_number: newRoom.room_number,\r\n        type: newRoom.type,\r\n        status: newRoom.status,\r\n        area: newRoom.area,\r\n        has_balcony: newRoom.hasBalcony\r\n      }),\r\n    });\r\n    \r\n    // إضافة الغرفة إلى المصفوفة المحلية\r\n    floor.rooms.push(newRoom);\r\n    return newRoom;\r\n  } catch (error) {\r\n    console.error('خطأ في إضافة الغرفة:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * إضافة خدمة لطابق\r\n */\r\nexport const addServiceToFloor = async (\r\n  complexId: string,\r\n  buildingId: string,\r\n  floorNumber: number,\r\n  service: Omit<Service, 'id'>\r\n): Promise<Service | undefined> => {\r\n  try {\r\n    const floor = getFloorByNumber(complexId, buildingId, floorNumber);\r\n    \r\n    if (!floor) {\r\n      return undefined;\r\n    }\r\n    \r\n    // إنشاء المعرف الفريد\r\n    const id = generateUniqueId();\r\n    \r\n    const newService: Service = {\r\n      id,\r\n      name: service.name,\r\n      type: service.type,\r\n      location: service.location,\r\n      description: service.description\r\n    };\r\n    \r\n    // إرسال طلب لحفظ الخدمة في قاعدة البيانات\r\n    await fetch('/api/housing/services', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        id: newService.id,\r\n        building_id: buildingId,\r\n        floor_number: floorNumber,\r\n        room_number: null,\r\n        name: newService.name,\r\n        type: newService.type,\r\n        location: newService.location,\r\n        description: newService.description\r\n      }),\r\n    });\r\n    \r\n    // إضافة الخدمة إلى المصفوفة المحلية\r\n    floor.services.push(newService);\r\n    return newService;\r\n  } catch (error) {\r\n    console.error('خطأ في إضافة الخدمة للطابق:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * إضافة خدمة لغرفة\r\n */\r\nexport const addServiceToRoom = async (\r\n  complexId: string,\r\n  buildingId: string,\r\n  floorNumber: number,\r\n  roomNumber: string,\r\n  service: Omit<Service, 'id'>\r\n): Promise<Service | undefined> => {\r\n  try {\r\n    const floor = getFloorByNumber(complexId, buildingId, floorNumber);\r\n    if (!floor) return undefined;\r\n    \r\n    const room = floor.rooms.find(room => room.room_number === roomNumber);\r\n    if (!room) return undefined;\r\n    \r\n    if (!room.services) {\r\n      room.services = [];\r\n    }\r\n    \r\n    // إنشاء المعرف الفريد\r\n    const id = generateUniqueId();\r\n    \r\n    const newService: Service = {\r\n      id,\r\n      name: service.name,\r\n      type: service.type,\r\n      location: service.location,\r\n      description: service.description\r\n    };\r\n    \r\n    // إرسال طلب لحفظ الخدمة في قاعدة البيانات\r\n    await fetch('/api/housing/services', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        id: newService.id,\r\n        building_id: buildingId,\r\n        floor_number: floorNumber,\r\n        room_number: roomNumber,\r\n        name: newService.name,\r\n        type: newService.type,\r\n        location: newService.location,\r\n        description: newService.description\r\n      }),\r\n    });\r\n    \r\n    // إضافة الخدمة إلى المصفوفة المحلية\r\n    room.services.push(newService);\r\n    return newService;\r\n  } catch (error) {\r\n    console.error('خطأ في إضافة الخدمة للغرفة:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * دالة مساعدة لإنشاء معرفات فريدة بتنسيق UUID\r\n */\r\nconst generateUniqueId = (): string => {\r\n  // Implementation of UUID v4 according to RFC4122\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n};\r\n\r\n/**\r\n * استيراد بيانات المجمعات السكنية من وحدات API خارجية\r\n */\r\nexport const importComplexesFromAPI = async (): Promise<void> => {\r\n  try {\r\n    const response = await fetch('/api/housing');\r\n    if (!response.ok) {\r\n      throw new Error(`فشل في جلب المجمعات السكنية: ${response.statusText}`);\r\n    }\r\n    \r\n    const apiComplexes = await response.json();\r\n    \r\n    // تحويل البيانات من النموذج القديم إلى النموذج الجديد\r\n    const transformedComplexes: ResidentialComplex[] = [];\r\n    \r\n    for (const apiComplex of apiComplexes) {\r\n      const complex: ResidentialComplex = {\r\n        id: apiComplex.id,\r\n        name: apiComplex.name,\r\n        location: apiComplex.location,\r\n        description: apiComplex.description,\r\n        created_at: apiComplex.created_at,\r\n        buildings: [],\r\n        sharedFacilities: []\r\n      };\r\n      \r\n      // استيراد المباني\r\n      try {\r\n        const buildingsResponse = await fetch(`/api/housing/buildings?complexId=${complex.id}`);\r\n        if (buildingsResponse.ok) {\r\n          const apiBuildings = await buildingsResponse.json();\r\n          \r\n          for (const apiBuilding of apiBuildings) {\r\n            const building: Building = {\r\n              id: apiBuilding.id,\r\n              name: apiBuilding.name,\r\n              complex_id: apiBuilding.complex_id,\r\n              floors_count: apiBuilding.floors,\r\n              description: apiBuilding.description,\r\n              address: apiBuilding.address,\r\n              floors: []\r\n            };\r\n            \r\n            // استيراد الطوابق\r\n            try {\r\n              const floorsResponse = await fetch(`/api/housing/floors?buildingId=${building.id}`);\r\n              if (floorsResponse.ok) {\r\n                const apiFloors = await floorsResponse.json();\r\n                \r\n                for (const apiFloor of apiFloors) {\r\n                  const floor: Floor = {\r\n                    id: apiFloor.id,\r\n                    number: apiFloor.number,\r\n                    rooms: [],\r\n                    services: []\r\n                  };\r\n                  \r\n                  // استيراد الغرف للطابق\r\n                  try {\r\n                    const roomsResponse = await fetch(`/api/housing/rooms?buildingId=${building.id}&floorNumber=${floor.number}`);\r\n                    if (roomsResponse.ok) {\r\n                      const apiRooms = await roomsResponse.json();\r\n                      \r\n                      for (const apiRoom of apiRooms) {\r\n                        const room: Room = {\r\n                          id: apiRoom.id,\r\n                          name: apiRoom.name,\r\n                          room_number: apiRoom.room_number,\r\n                          type: apiRoom.type,\r\n                          status: apiRoom.status,\r\n                          area: apiRoom.area,\r\n                          hasBalcony: apiRoom.has_balcony,\r\n                          services: []\r\n                        };\r\n                        \r\n                        // استيراد الخدمات للغرفة\r\n                        try {\r\n                          const servicesResponse = await fetch(`/api/housing/services?roomId=${room.id}`);\r\n                          if (servicesResponse.ok) {\r\n                            const apiServices = await servicesResponse.json();\r\n                            room.services = apiServices.map((apiService: any) => ({\r\n                              id: apiService.id,\r\n                              name: apiService.name,\r\n                              type: apiService.type,\r\n                              location: apiService.location,\r\n                              description: apiService.description\r\n                            }));\r\n                          }\r\n                        } catch (error) {\r\n                          console.error(`فشل في استيراد خدمات الغرفة ${room.name}:`, error);\r\n                        }\r\n                        \r\n                        floor.rooms.push(room);\r\n                      }\r\n                    }\r\n                  } catch (error) {\r\n                    console.error(`فشل في استيراد غرف الطابق ${floor.number}:`, error);\r\n                  }\r\n                  \r\n                  // استيراد الخدمات للطابق\r\n                  try {\r\n                    const servicesResponse = await fetch(`/api/housing/services?floorId=${floor.id}`);\r\n                    if (servicesResponse.ok) {\r\n                      const apiServices = await servicesResponse.json();\r\n                      floor.services = apiServices.map((apiService: any) => ({\r\n                        id: apiService.id,\r\n                        name: apiService.name,\r\n                        type: apiService.type,\r\n                        location: apiService.location,\r\n                        description: apiService.description\r\n                      }));\r\n                    }\r\n                  } catch (error) {\r\n                    console.error(`فشل في استيراد خدمات الطابق ${floor.number}:`, error);\r\n                  }\r\n                  \r\n                  building.floors.push(floor);\r\n                }\r\n                \r\n                // ترتيب الطوابق تصاعدياً حسب الرقم\r\n                building.floors.sort((a, b) => a.number - b.number);\r\n              }\r\n            } catch (error) {\r\n              console.error(`فشل في استيراد طوابق المبنى ${building.name}:`, error);\r\n              \r\n              // إنشاء طوابق افتراضية بناءً على عدد الطوابق في المبنى\r\n              for (let i = 1; i <= apiBuilding.floors; i++) {\r\n                const floor: Floor = {\r\n                  id: generateUniqueId(),\r\n                  number: i,\r\n                  rooms: [],\r\n                  services: []\r\n                };\r\n                building.floors.push(floor);\r\n              }\r\n            }\r\n            \r\n            complex.buildings.push(building);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`فشل في استيراد المباني للمجمع ${complex.name}:`, error);\r\n      }\r\n      \r\n      transformedComplexes.push(complex);\r\n    }\r\n    \r\n    // تحديث المصفوفة الرئيسية\r\n    residentialComplexes = transformedComplexes;\r\n    \r\n  } catch (error) {\r\n    console.error('فشل في استيراد المجمعات السكنية:', error);\r\n    throw error;\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}