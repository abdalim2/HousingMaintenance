{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["import { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nexport const pool = new Pool({\r\n  connectionString,\r\n});\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات\r\nexport async function query(text: string, params?: any[]) {\r\n  const client = await pool.connect();\r\n  try {\r\n    const result = await client.query(text, params);\r\n    return result;\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()');\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":";;;;;AAAA;;;;;;AAEA,mDAAmD;AACnD,MAAM,mBAAmB;AAGlB,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IAC3B;AACF;AAGO,eAAe,MAAM,IAAY,EAAE,MAAc;IACtD,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,MAAM;QAC3B,QAAQ,GAAG,CAAC,kCAAkC,OAAO,IAAI,CAAC,EAAE;QAC5D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/housing/facilities/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { query } from '@/lib/neondb';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    console.log('[API] GET /api/housing/facilities - Starting request');\r\n    \r\n    // Extract query parameters\r\n    const { searchParams } = new URL(request.url);\r\n    const complexId = searchParams.get('complexId');\r\n    const buildingId = searchParams.get('buildingId');\r\n    \r\n    console.log(`[API] Fetching facilities for complexId: ${complexId || 'all'}, buildingId: ${buildingId || 'all'}`);\r\n    \r\n    // Build SQL query\r\n    let sqlQuery = 'SELECT * FROM facilities';\r\n    const params: any[] = [];\r\n    let paramIndex = 1;\r\n    \r\n    // Add filters\r\n    if (complexId || buildingId) {\r\n      sqlQuery += ' WHERE';\r\n      \r\n      if (complexId) {\r\n        sqlQuery += ` complex_id = $${paramIndex}`;\r\n        params.push(complexId);\r\n        paramIndex++;\r\n      }\r\n      \r\n      if (buildingId) {\r\n        if (complexId) sqlQuery += ' AND';\r\n        sqlQuery += ` building_id = $${paramIndex}`;\r\n        params.push(buildingId);\r\n      }\r\n    }\r\n    \r\n    // Execute query with detailed error handling\r\n    try {\r\n      const result = await query(sqlQuery, params);\r\n      \r\n      console.log(`[API] Successfully fetched ${result.rows.length} facilities`);\r\n      return NextResponse.json(result.rows || []);\r\n    } catch (queryError: any) {\r\n      console.error('[API] Exception during query execution:', queryError);\r\n      return NextResponse.json(\r\n        { error: `Query execution failed: ${queryError.message}` }, \r\n        { status: 500 }\r\n      );\r\n    }\r\n  } catch (error: any) {\r\n    console.error('[API] Unexpected error in facilities API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch facilities: ' + (error.message || 'Unknown error') }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const facility = await request.json();\r\n    \r\n    // Validate required fields\r\n    if (!facility.name || !facility.type || !facility.complex_id || !facility.location_description) {\r\n      return NextResponse.json(\r\n        { error: 'Name, type, complex_id, and location_description are required' }, \r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Extract fields from facility object\r\n    const fields = Object.keys(facility);\r\n    const values = fields.map((field) => facility[field]);\r\n    const placeholders = fields.map((_, index) => `$${index + 1}`).join(', ');\r\n    \r\n    // Build INSERT query\r\n    const sqlQuery = \r\n      `INSERT INTO facilities (${fields.join(', ')}) \r\n       VALUES (${placeholders})\r\n       RETURNING *`;\r\n    \r\n    const result = await query(sqlQuery, values);\r\n    \r\n    if (!result.rowCount) {\r\n      return NextResponse.json(\r\n        { error: 'Failed to create facility' }, \r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(result.rows[0]);\r\n  } catch (error: any) {\r\n    console.error('Unexpected error creating facility:', error);\r\n    return NextResponse.json(\r\n      { error: `Failed to create facility: ${error.message}` }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const updates = await request.json();\r\n    const { id, ...facilityData } = updates;\r\n    \r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Facility ID is required' }, { status: 400 });\r\n    }\r\n    \r\n    // Build the SET part of the query\r\n    const fields = Object.keys(facilityData);\r\n    const setClause = fields\r\n      .map((field, index) => `${field} = $${index + 2}`)\r\n      .join(', ');\r\n    \r\n    // Build values array\r\n    const values = [id, ...fields.map(field => facilityData[field])];\r\n    \r\n    // Build UPDATE query\r\n    const sqlQuery = \r\n      `UPDATE facilities \r\n       SET ${setClause}\r\n       WHERE id = $1\r\n       RETURNING *`;\r\n    \r\n    const result = await query(sqlQuery, values);\r\n    \r\n    if (!result.rowCount) {\r\n      return NextResponse.json(\r\n        { error: 'Facility not found or no changes made' }, \r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(result.rows[0]);\r\n  } catch (error: any) {\r\n    console.error('Unexpected error updating facility:', error);\r\n    return NextResponse.json(\r\n      { error: `Failed to update facility: ${error.message}` }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id');\r\n    \r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Facility ID is required' }, { status: 400 });\r\n    }\r\n    \r\n    // Delete facility\r\n    const sqlQuery = 'DELETE FROM facilities WHERE id = $1';\r\n    const result = await query(sqlQuery, [id]);\r\n    \r\n    if (!result.rowCount) {\r\n      return NextResponse.json(\r\n        { error: 'Facility not found' }, \r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ success: true });\r\n  } catch (error: any) {\r\n    console.error('Unexpected error deleting facility:', error);\r\n    return NextResponse.json(\r\n      { error: `Failed to delete facility: ${error.message}` }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}