{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize the Supabase client with proper Supabase URL and key\r\nconst supabaseUrl = 'zzzzz';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10aWN2bXlmcmRtY2lhZWlwZnh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEwODc1OTMsImV4cCI6MjA1NjY2MzU5M30.6iudxBl6js0heW1mhoSmcXegTIN_lAN2GiFeA3plSIo';\r\n\r\n// Create the Supabase client\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n// Store PostgreSQL direct connection URL for database initialization scripts\r\nexport const postgresUrl = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';"],"names":[],"mappings":";;;;AAAA;;AAEA,kEAAkE;AAClE,MAAM,cAAc;AACpB,MAAM,cAAc;AAGb,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,cAAc","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/diagnostics/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Test connection by attempting to fetch the database version\r\n    const { data, error } = await supabase.rpc('version');\r\n    \r\n    if (error) {\r\n      return NextResponse.json({ \r\n        status: 'error', \r\n        message: 'Failed to connect to database', \r\n        error: error.message,\r\n        details: error \r\n      }, { status: 500 });\r\n    }\r\n    \r\n    // Check if specific tables exist\r\n    const tableChecks = await Promise.all([\r\n      checkTableExists('maintenance_requests'),\r\n      checkTableExists('residential_complexes'),\r\n      checkTableExists('buildings'),\r\n      checkTableExists('maintenance_items')\r\n    ]);\r\n    \r\n    return NextResponse.json({ \r\n      status: 'success', \r\n      message: 'Successfully connected to Supabase',\r\n      version: data,\r\n      tables: {\r\n        maintenance_requests: tableChecks[0],\r\n        residential_complexes: tableChecks[1],\r\n        buildings: tableChecks[2],\r\n        maintenance_items: tableChecks[3]\r\n      }\r\n    });\r\n  } catch (err: any) {\r\n    return NextResponse.json({ \r\n      status: 'error', \r\n      message: 'Failed to run diagnostic tests',\r\n      error: err.message \r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { action } = await request.json();\r\n\r\n    if (action === 'setup_database') {\r\n      // تنفيذ سكريبت إعداد قاعدة البيانات\r\n      const result = await runSetupDBScript();\r\n      \r\n      if (result.success) {\r\n        return NextResponse.json({ \r\n          success: true, \r\n          message: 'تم إعداد قاعدة البيانات بنجاح',\r\n          details: result.details\r\n        });\r\n      } else {\r\n        return NextResponse.json({ \r\n          success: false, \r\n          error: 'فشل إعداد قاعدة البيانات',\r\n          details: result.details\r\n        }, { status: 500 });\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: 'إجراء غير معروف' \r\n    }, { status: 400 });\r\n    \r\n  } catch (error: any) {\r\n    console.error('Error in diagnostic API:', error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: error.message || 'حدث خطأ أثناء تنفيذ العملية',\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Function to run the database setup script\r\nasync function runSetupDBScript(): Promise<{ success: boolean; details: string }> {\r\n  return new Promise((resolve) => {\r\n    // تحديد مسار سكريبت الإعداد\r\n    const scriptPath = path.resolve(process.cwd(), 'scripts/setup-db-supabase.js');\r\n    \r\n    // تنفيذ السكريبت باستخدام Node.js\r\n    const child = spawn('node', [scriptPath]);\r\n    \r\n    let output = '';\r\n    let errorOutput = '';\r\n    \r\n    child.stdout.on('data', (data) => {\r\n      output += data.toString();\r\n    });\r\n    \r\n    child.stderr.on('data', (data) => {\r\n      errorOutput += data.toString();\r\n    });\r\n    \r\n    child.on('close', (code) => {\r\n      if (code === 0) {\r\n        resolve({\r\n          success: true,\r\n          details: output\r\n        });\r\n      } else {\r\n        resolve({\r\n          success: false,\r\n          details: `Exit code: ${code}\\nOutput: ${output}\\nErrors: ${errorOutput}`\r\n        });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function checkTableExists(tableName: string): Promise<boolean> {\r\n  try {\r\n    // Try to get a single row from the table\r\n    const { data, error } = await supabase\r\n      .from(tableName)\r\n      .select('*')\r\n      .limit(1);\r\n    \r\n    if (error && error.message.includes('does not exist')) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}