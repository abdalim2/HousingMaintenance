{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/inventory/process-file/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\n\r\ninterface ProcessedItem {\r\n  arabicName: string;\r\n  englishName: string;\r\n  category: string;\r\n  unit: string;\r\n  imageUrl: string;\r\n}\r\n\r\n// Helper function to get common units based on category\r\nconst getCommonUnit = (category: string): string => {\r\n  const categoryMap: { [key: string]: string } = {\r\n    'أدوات كهربائية': 'قطعة',\r\n    'أدوات سباكة': 'قطعة',\r\n    'مواد بناء': 'كيس',\r\n    'دهانات': 'جالون',\r\n    'أدوات نجارة': 'قطعة',\r\n    'مواد تنظيف': 'عبوة',\r\n    'أدوات صيانة': 'قطعة',\r\n    'أجهزة كهربائية': 'جهاز',\r\n    'معدات': 'قطعة',\r\n  };\r\n\r\n  return categoryMap[category] || 'قطعة';\r\n};\r\n\r\n// Helper function to categorize items\r\nconst categorizeItem = (itemName: string): string => {\r\n  const lowerName = itemName.toLowerCase();\r\n\r\n  if (/مفتاح|مصباح|كابل|سلك|انارة|لمبة|فيش|ليد/.test(lowerName)) {\r\n    return 'أدوات كهربائية';\r\n  } else if (/حنفية|خلاط|محبس|مواسير|صنبور|سيفون|مرحاض/.test(lowerName)) {\r\n    return 'أدوات سباكة';\r\n  } else if (/اسمنت|طوب|خرسانة|جبس|رمل/.test(lowerName)) {\r\n    return 'مواد بناء';\r\n  } else if (/دهان|طلاء|لاكيه|بوية|ورنيش/.test(lowerName)) {\r\n    return 'دهانات';\r\n  } else if (/مسامير|خشب|قشرة|لوح|مفك/.test(lowerName)) {\r\n    return 'أدوات نجارة';\r\n  } else if (/منظف|صابون|معطر|كلور|مطهر/.test(lowerName)) {\r\n    return 'مواد تنظيف';\r\n  } else if (/مفتاح|مطرقة|كماشة|عدة|أداة|مفك/.test(lowerName)) {\r\n    return 'أدوات صيانة';\r\n  } else if (/تلفاز|ثلاجة|غسالة|مكيف|فرن|سخان/.test(lowerName)) {\r\n    return 'أجهزة كهربائية';\r\n  }\r\n\r\n  return 'معدات';\r\n};\r\n\r\n// Helper to generate image URL (using placeholder images for now)\r\nconst getImageUrl = (item: string): string => {\r\n  // Generate a placeholder image based on the item name's first letter\r\n  const firstLetter = item.trim().charAt(0).toUpperCase();\r\n  return `https://via.placeholder.com/150/3498db/ffffff?text=${encodeURIComponent(firstLetter)}`;\r\n};\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { content } = await request.json();\r\n\r\n    if (!content) {\r\n      return NextResponse.json({ error: 'No content provided' }, { status: 400 });\r\n    }\r\n\r\n    // Parse the file content - assuming one item per line\r\n    const lines = content\r\n      .split('\\n')\r\n      .map((line: string) => line.trim())\r\n      .filter((line: string) => line.length > 0);\r\n\r\n    // Process each line to create item entries\r\n    const items: ProcessedItem[] = lines.map((line: string) => {\r\n      const arabicName = line.trim();\r\n      let englishName = '';\r\n\r\n      // Generate a simple transliteration for English name\r\n      // This is a simplified version - in a production app you'd use a proper transliteration library\r\n      const transliterationMap: { [key: string]: string } = {\r\n        ا: 'a',\r\n        ب: 'b',\r\n        ت: 't',\r\n        ث: 'th',\r\n        ج: 'j',\r\n        ح: 'h',\r\n        خ: 'kh',\r\n        د: 'd',\r\n        ذ: 'th',\r\n        ر: 'r',\r\n        ز: 'z',\r\n        س: 's',\r\n        ش: 'sh',\r\n        ص: 's',\r\n        ض: 'd',\r\n        ط: 't',\r\n        ظ: 'z',\r\n        ع: 'a',\r\n        غ: 'gh',\r\n        ف: 'f',\r\n        ق: 'q',\r\n        ك: 'k',\r\n        ل: 'l',\r\n        م: 'm',\r\n        ن: 'n',\r\n        ه: 'h',\r\n        و: 'w',\r\n        ي: 'y',\r\n      };\r\n\r\n      // Generate a simple English name version - this is just a placeholder\r\n      englishName = arabicName\r\n        .split('')\r\n        .map((char) => transliterationMap[char] || char)\r\n        .join('')\r\n        .replace(/\\s+/g, ' ');\r\n\r\n      // Categorize the item based on its name\r\n      const category = categorizeItem(arabicName);\r\n\r\n      // Get common unit based on category\r\n      const unit = getCommonUnit(category);\r\n\r\n      // Generate placeholder image URL\r\n      const imageUrl = getImageUrl(arabicName);\r\n\r\n      return {\r\n        arabicName,\r\n        englishName,\r\n        category,\r\n        unit,\r\n        imageUrl,\r\n      };\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        items,\r\n      },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error('Error processing inventory file:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Failed to process file',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}