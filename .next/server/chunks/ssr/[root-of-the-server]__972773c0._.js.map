{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize the Supabase client with proper Supabase URL and key\r\nconst supabaseUrl = 'zzzzz';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10aWN2bXlmcmRtY2lhZWlwZnh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEwODc1OTMsImV4cCI6MjA1NjY2MzU5M30.6iudxBl6js0heW1mhoSmcXegTIN_lAN2GiFeA3plSIo';\r\n\r\n// Create the Supabase client\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n// Store PostgreSQL direct connection URL for database initialization scripts\r\nexport const postgresUrl = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';"],"names":[],"mappings":";;;;AAAA;;AAEA,kEAAkE;AAClE,MAAM,cAAc;AACpB,MAAM,cAAc;AAGb,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,cAAc","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/purchaseService.ts"],"sourcesContent":["import { supabase } from '../supabase';\r\nimport { PurchaseOrder, PurchaseItem } from '@/models/types';\r\n\r\n// Purchase Order Operations\r\nexport const getPurchaseOrders = async (\r\n  status?: PurchaseOrder['status']\r\n): Promise<PurchaseOrder[]> => {\r\n  try {\r\n    let query = supabase.from('purchase_orders').select('*');\r\n    \r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n    \r\n    const { data, error } = await query.order('order_date', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Supabase error in getPurchaseOrders:', error);\r\n      \r\n      if (error.message.includes('does not exist')) {\r\n        console.warn('The purchase_orders table might not exist yet. Make sure to run database initialization scripts.');\r\n      }\r\n      \r\n      throw new Error(`Database error: ${error.message}`);\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseOrders:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getPurchaseOrderById = async (id: string): Promise<PurchaseOrder | null> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_orders')\r\n    .select('*')\r\n    .eq('id', id)\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const createPurchaseOrder = async (\r\n  order: Omit<PurchaseOrder, 'id' | 'order_date'>\r\n): Promise<PurchaseOrder> => {\r\n  const newOrder = {\r\n    ...order,\r\n    order_date: new Date().toISOString(),\r\n    status: order.status || 'draft'\r\n  };\r\n\r\n  const { data, error } = await supabase\r\n    .from('purchase_orders')\r\n    .insert([newOrder])\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const updatePurchaseOrder = async (\r\n  id: string, \r\n  updates: Partial<PurchaseOrder>\r\n): Promise<PurchaseOrder> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_orders')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const deletePurchaseOrder = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('purchase_orders')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) throw error;\r\n};\r\n\r\n// Purchase Items Operations\r\nexport const getPurchaseItems = async (\r\n  purchaseOrderId: string\r\n): Promise<PurchaseItem[]> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .select(`\r\n      *,\r\n      items:item_id (\r\n        id,\r\n        name,\r\n        category_id,\r\n        unit\r\n      )\r\n    `)\r\n    .eq('purchase_order_id', purchaseOrderId);\r\n  \r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\nexport const getPurchaseItemById = async (id: string): Promise<PurchaseItem | null> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .select(`\r\n      *,\r\n      items:item_id (\r\n        id,\r\n        name,\r\n        category_id,\r\n        unit\r\n      )\r\n    `)\r\n    .eq('id', id)\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const createPurchaseItem = async (\r\n  item: Omit<PurchaseItem, 'id'>\r\n): Promise<PurchaseItem> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .insert([item])\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const updatePurchaseItem = async (\r\n  id: string, \r\n  updates: Partial<PurchaseItem>\r\n): Promise<PurchaseItem> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const deletePurchaseItem = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('purchase_items')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) throw error;\r\n};\r\n\r\n// Generate Monthly Purchase Orders\r\nexport const generateMonthlyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    // 1. Get all maintenance requests for the month\r\n    const startDate = new Date(year, month - 1, 1).toISOString();\r\n    const endDate = new Date(year, month, 0).toISOString();\r\n    \r\n    // Get all maintenance requests for the specified month first\r\n    const { data: maintenanceRequests, error: requestsError } = await supabase\r\n      .from('maintenance_requests')\r\n      .select('id')\r\n      .gte('reported_date', startDate)\r\n      .lte('reported_date', endDate);\r\n    \r\n    if (requestsError) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (requestsError.message.includes('does not exist')) {\r\n        console.warn('Maintenance requests table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw requestsError;\r\n    }\r\n    \r\n    if (!maintenanceRequests || maintenanceRequests.length === 0) {\r\n      console.log('No maintenance requests found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // Get maintenance items for these requests\r\n    const maintenanceIds = maintenanceRequests.map(req => req.id);\r\n    const { data: maintenanceItems, error: itemsError } = await supabase\r\n      .from('maintenance_items')\r\n      .select('*')\r\n      .in('maintenance_id', maintenanceIds);\r\n    \r\n    if (itemsError) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (itemsError.message.includes('does not exist')) {\r\n        console.warn('Maintenance items table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw itemsError;\r\n    }\r\n    \r\n    if (!maintenanceItems || maintenanceItems.length === 0) {\r\n      console.log('No maintenance items found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // 2. Group items by item_id and sum quantities\r\n    const itemQuantities: Record<string, number> = {};\r\n    \r\n    maintenanceItems.forEach(item => {\r\n      if (!itemQuantities[item.item_id]) {\r\n        itemQuantities[item.item_id] = 0;\r\n      }\r\n      itemQuantities[item.item_id] += item.quantity_needed;\r\n    });\r\n    \r\n    // 3. Create a new purchase order\r\n    const { data: purchaseOrder, error: orderError } = await supabase\r\n      .from('purchase_orders')\r\n      .insert([{\r\n        order_date: new Date().toISOString(),\r\n        status: 'draft',\r\n        created_by: createdBy,\r\n        notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')}`\r\n      }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (orderError) throw orderError;\r\n    \r\n    // 4. Create purchase items for each item type\r\n    if (Object.keys(itemQuantities).length > 0) {\r\n      const purchaseItems = Object.entries(itemQuantities).map(([itemId, quantity]) => ({\r\n        purchase_order_id: purchaseOrder.id,\r\n        item_id: itemId,\r\n        quantity: quantity\r\n      }));\r\n      \r\n      const { error: purchaseItemsError } = await supabase\r\n        .from('purchase_items')\r\n        .insert(purchaseItems);\r\n      \r\n      if (purchaseItemsError) throw purchaseItemsError;\r\n    }\r\n    \r\n    return purchaseOrder;\r\n  } catch (error: any) {\r\n    console.error('Error generating monthly purchase order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to create an empty purchase order when no maintenance items are found\r\nconst createEmptyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  const { data: purchaseOrder, error: orderError } = await supabase\r\n    .from('purchase_orders')\r\n    .insert([{\r\n      order_date: new Date().toISOString(),\r\n      status: 'draft',\r\n      created_by: createdBy,\r\n      notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')} (No maintenance items found)`\r\n    }])\r\n    .select()\r\n    .single();\r\n  \r\n  if (orderError) throw orderError;\r\n  return purchaseOrder;\r\n};\r\n\r\n// Process Received Items\r\nexport const processReceivedItems = async (\r\n  purchaseOrderId: string, \r\n  receivedItems: Array<{ id: string, received_quantity: number }>\r\n): Promise<void> => {\r\n  // Start a transaction to update both purchase items and inventory\r\n  for (const item of receivedItems) {\r\n    // 1. Update the purchase item\r\n    const { data: purchaseItem, error: updateError } = await supabase\r\n      .from('purchase_items')\r\n      .update({ received_quantity: item.received_quantity })\r\n      .eq('id', item.id)\r\n      .select('*')\r\n      .single();\r\n    \r\n    if (updateError) throw updateError;\r\n    \r\n    // 2. Update inventory\r\n    // First, get the current inventory for this item\r\n    const { data: currentInventory, error: inventoryError } = await supabase\r\n      .from('inventory')\r\n      .select('*')\r\n      .eq('item_id', purchaseItem.item_id)\r\n      .single();\r\n    \r\n    if (inventoryError && inventoryError.code !== 'PGRST116') {\r\n      throw inventoryError;\r\n    }\r\n    \r\n    // If inventory entry exists, update it\r\n    if (currentInventory) {\r\n      const { error: updateInventoryError } = await supabase\r\n        .from('inventory')\r\n        .update({\r\n          quantity: currentInventory.quantity + item.received_quantity,\r\n          last_updated: new Date().toISOString()\r\n        })\r\n        .eq('id', currentInventory.id);\r\n      \r\n      if (updateInventoryError) throw updateInventoryError;\r\n    } \r\n    // If no inventory entry exists, create one\r\n    else {\r\n      const { error: createInventoryError } = await supabase\r\n        .from('inventory')\r\n        .insert([{\r\n          item_id: purchaseItem.item_id,\r\n          quantity: item.received_quantity,\r\n          unit_price: purchaseItem.unit_price,\r\n          last_updated: new Date().toISOString()\r\n        }]);\r\n      \r\n      if (createInventoryError) throw createInventoryError;\r\n    }\r\n  }\r\n  \r\n  // 3. Update the purchase order status to 'received'\r\n  const { error: orderUpdateError } = await supabase\r\n    .from('purchase_orders')\r\n    .update({ status: 'received' })\r\n    .eq('id', purchaseOrderId);\r\n  \r\n  if (orderUpdateError) throw orderUpdateError;\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/purchase-orders/monthly/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { generateMonthlyPurchaseOrder } from '@/lib/services/purchaseService';\r\n\r\nexport default function MonthlyPurchaseOrderPage() {\r\n  const router = useRouter();\r\n  const [year, setYear] = useState<number>(new Date().getFullYear());\r\n  const [month, setMonth] = useState<number>(new Date().getMonth() + 1);\r\n  const [createdBy, setCreatedBy] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Years range (current year and 2 years back)\r\n  const currentYear = new Date().getFullYear();\r\n  const years = [currentYear, currentYear - 1, currentYear - 2];\r\n\r\n  // Month names in Arabic\r\n  const months = [\r\n    { value: 1, label: 'يناير' },\r\n    { value: 2, label: 'فبراير' },\r\n    { value: 3, label: 'مارس' },\r\n    { value: 4, label: 'أبريل' },\r\n    { value: 5, label: 'مايو' },\r\n    { value: 6, label: 'يونيو' },\r\n    { value: 7, label: 'يوليو' },\r\n    { value: 8, label: 'أغسطس' },\r\n    { value: 9, label: 'سبتمبر' },\r\n    { value: 10, label: 'أكتوبر' },\r\n    { value: 11, label: 'نوفمبر' },\r\n    { value: 12, label: 'ديسمبر' },\r\n  ];\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!createdBy.trim()) {\r\n      setError(\"الرجاء إدخال اسم منشئ الطلب\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const purchaseOrder = await generateMonthlyPurchaseOrder(year, month, createdBy);\r\n      \r\n      // Redirect to the newly created purchase order\r\n      router.push(`/purchase-orders/${purchaseOrder.id}`);\r\n    } catch (err: any) {\r\n      console.error('Error generating monthly purchase order:', err);\r\n      setError(err.message || 'حدث خطأ أثناء إنشاء طلب الشراء الشهري');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold\">إنشاء طلب شراء شهري</h1>\r\n        <Link href=\"/purchase-orders\" className=\"btn btn-secondary\">\r\n          العودة لقائمة طلبات الشراء\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"bg-white rounded-lg shadow p-6\">\r\n        <p className=\"mb-6 text-gray-600\">\r\n          سيقوم النظام بإنشاء طلب شراء يتضمن جميع المواد المطلوبة لطلبات الصيانة المسجلة خلال الشهر المحدد.\r\n        </p>\r\n\r\n        {error && (\r\n          <div className=\"bg-red-100 border-r-4 border-red-500 text-red-700 p-4 mb-6 rounded-md\">\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n            <div>\r\n              <label className=\"block mb-2 text-sm font-medium\">السنة</label>\r\n              <select\r\n                value={year}\r\n                onChange={(e) => setYear(Number(e.target.value))}\r\n                className=\"select w-full\"\r\n                disabled={loading}\r\n              >\r\n                {years.map((y) => (\r\n                  <option key={y} value={y}>{y}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block mb-2 text-sm font-medium\">الشهر</label>\r\n              <select\r\n                value={month}\r\n                onChange={(e) => setMonth(Number(e.target.value))}\r\n                className=\"select w-full\"\r\n                disabled={loading}\r\n              >\r\n                {months.map((m) => (\r\n                  <option key={m.value} value={m.value}>{m.label}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mb-6\">\r\n            <label className=\"block mb-2 text-sm font-medium\">منشئ الطلب</label>\r\n            <input\r\n              type=\"text\"\r\n              value={createdBy}\r\n              onChange={(e) => setCreatedBy(e.target.value)}\r\n              className=\"input w-full\"\r\n              placeholder=\"أدخل اسمك هنا\"\r\n              disabled={loading}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex justify-end\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? 'جاري الإنشاء...' : 'إنشاء طلب الشراء الشهري'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,IAAI,OAAO,WAAW;IAC/D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,IAAI,OAAO,QAAQ,KAAK;IACnE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACnD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,8CAA8C;IAC9C,MAAM,cAAc,IAAI,OAAO,WAAW;IAC1C,MAAM,QAAQ;QAAC;QAAa,cAAc;QAAG,cAAc;KAAE;IAE7D,wBAAwB;IACxB,MAAM,SAAS;QACb;YAAE,OAAO;YAAG,OAAO;QAAQ;QAC3B;YAAE,OAAO;YAAG,OAAO;QAAS;QAC5B;YAAE,OAAO;YAAG,OAAO;QAAO;QAC1B;YAAE,OAAO;YAAG,OAAO;QAAQ;QAC3B;YAAE,OAAO;YAAG,OAAO;QAAO;QAC1B;YAAE,OAAO;YAAG,OAAO;QAAQ;QAC3B;YAAE,OAAO;YAAG,OAAO;QAAQ;QAC3B;YAAE,OAAO;YAAG,OAAO;QAAQ;QAC3B;YAAE,OAAO;YAAG,OAAO;QAAS;QAC5B;YAAE,OAAO;YAAI,OAAO;QAAS;QAC7B;YAAE,OAAO;YAAI,OAAO;QAAS;QAC7B;YAAE,OAAO;YAAI,OAAO;QAAS;KAC9B;IAED,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,IAAI,CAAC,UAAU,IAAI,IAAI;YACrB,SAAS;YACT;QACF;QAEA,WAAW;QACX,SAAS;QAET,IAAI;YACF,MAAM,gBAAgB,MAAM,CAAA,GAAA,yIAAA,CAAA,+BAA4B,AAAD,EAAE,MAAM,OAAO;YAEtE,+CAA+C;YAC/C,OAAO,IAAI,CAAC,CAAC,iBAAiB,EAAE,cAAc,EAAE,EAAE;QACpD,EAAE,OAAO,KAAU;YACjB,QAAQ,KAAK,CAAC,4CAA4C;YAC1D,SAAS,IAAI,OAAO,IAAI;YACxB,WAAW;QACb;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;wBAAmB,WAAU;kCAAoB;;;;;;;;;;;;0BAK9D,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAE,WAAU;kCAAqB;;;;;;oBAIjC,uBACC,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;sCAAG;;;;;;;;;;;kCAIR,8OAAC;wBAAK,UAAU;;0CACd,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;;0DACC,8OAAC;gDAAM,WAAU;0DAAiC;;;;;;0DAClD,8OAAC;gDACC,OAAO;gDACP,UAAU,CAAC,IAAM,QAAQ,OAAO,EAAE,MAAM,CAAC,KAAK;gDAC9C,WAAU;gDACV,UAAU;0DAET,MAAM,GAAG,CAAC,CAAC,kBACV,8OAAC;wDAAe,OAAO;kEAAI;uDAAd;;;;;;;;;;;;;;;;kDAKnB,8OAAC;;0DACC,8OAAC;gDAAM,WAAU;0DAAiC;;;;;;0DAClD,8OAAC;gDACC,OAAO;gDACP,UAAU,CAAC,IAAM,SAAS,OAAO,EAAE,MAAM,CAAC,KAAK;gDAC/C,WAAU;gDACV,UAAU;0DAET,OAAO,GAAG,CAAC,CAAC,kBACX,8OAAC;wDAAqB,OAAO,EAAE,KAAK;kEAAG,EAAE,KAAK;uDAAjC,EAAE,KAAK;;;;;;;;;;;;;;;;;;;;;;0CAM5B,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAM,WAAU;kDAAiC;;;;;;kDAClD,8OAAC;wCACC,MAAK;wCACL,OAAO;wCACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;wCAC5C,WAAU;wCACV,aAAY;wCACZ,UAAU;wCACV,QAAQ;;;;;;;;;;;;0CAIZ,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCACC,MAAK;oCACL,WAAU;oCACV,UAAU;8CAET,UAAU,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO7C","debugId":null}}]
}