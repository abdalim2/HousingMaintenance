{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize the Supabase client with proper Supabase URL and key\r\nconst supabaseUrl = 'zzzzz';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10aWN2bXlmcmRtY2lhZWlwZnh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEwODc1OTMsImV4cCI6MjA1NjY2MzU5M30.6iudxBl6js0heW1mhoSmcXegTIN_lAN2GiFeA3plSIo';\r\n\r\n// Create the Supabase client\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n// Store PostgreSQL direct connection URL for database initialization scripts\r\nexport const postgresUrl = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';"],"names":[],"mappings":";;;;AAAA;;AAEA,kEAAkE;AAClE,MAAM,cAAc;AACpB,MAAM,cAAc;AAGb,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,cAAc","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/purchaseService.ts"],"sourcesContent":["import { supabase } from '../supabase';\r\nimport { PurchaseOrder, PurchaseItem } from '@/models/types';\r\n\r\n// Purchase Order Operations\r\nexport const getPurchaseOrders = async (\r\n  status?: PurchaseOrder['status']\r\n): Promise<PurchaseOrder[]> => {\r\n  try {\r\n    let query = supabase.from('purchase_orders').select('*');\r\n    \r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n    \r\n    const { data, error } = await query.order('order_date', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Supabase error in getPurchaseOrders:', error);\r\n      \r\n      if (error.message.includes('does not exist')) {\r\n        console.warn('The purchase_orders table might not exist yet. Make sure to run database initialization scripts.');\r\n      }\r\n      \r\n      throw new Error(`Database error: ${error.message}`);\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseOrders:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getPurchaseOrderById = async (id: string): Promise<PurchaseOrder | null> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_orders')\r\n    .select('*')\r\n    .eq('id', id)\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const createPurchaseOrder = async (\r\n  order: Omit<PurchaseOrder, 'id' | 'order_date'>\r\n): Promise<PurchaseOrder> => {\r\n  const newOrder = {\r\n    ...order,\r\n    order_date: new Date().toISOString(),\r\n    status: order.status || 'draft'\r\n  };\r\n\r\n  const { data, error } = await supabase\r\n    .from('purchase_orders')\r\n    .insert([newOrder])\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const updatePurchaseOrder = async (\r\n  id: string, \r\n  updates: Partial<PurchaseOrder>\r\n): Promise<PurchaseOrder> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_orders')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const deletePurchaseOrder = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('purchase_orders')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) throw error;\r\n};\r\n\r\n// Purchase Items Operations\r\nexport const getPurchaseItems = async (\r\n  purchaseOrderId: string\r\n): Promise<PurchaseItem[]> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .select(`\r\n      *,\r\n      items:item_id (\r\n        id,\r\n        name,\r\n        category_id,\r\n        unit\r\n      )\r\n    `)\r\n    .eq('purchase_order_id', purchaseOrderId);\r\n  \r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\nexport const getPurchaseItemById = async (id: string): Promise<PurchaseItem | null> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .select(`\r\n      *,\r\n      items:item_id (\r\n        id,\r\n        name,\r\n        category_id,\r\n        unit\r\n      )\r\n    `)\r\n    .eq('id', id)\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const createPurchaseItem = async (\r\n  item: Omit<PurchaseItem, 'id'>\r\n): Promise<PurchaseItem> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .insert([item])\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const updatePurchaseItem = async (\r\n  id: string, \r\n  updates: Partial<PurchaseItem>\r\n): Promise<PurchaseItem> => {\r\n  const { data, error } = await supabase\r\n    .from('purchase_items')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const deletePurchaseItem = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('purchase_items')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) throw error;\r\n};\r\n\r\n// Generate Monthly Purchase Orders\r\nexport const generateMonthlyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    // 1. Get all maintenance requests for the month\r\n    const startDate = new Date(year, month - 1, 1).toISOString();\r\n    const endDate = new Date(year, month, 0).toISOString();\r\n    \r\n    // Get all maintenance requests for the specified month first\r\n    const { data: maintenanceRequests, error: requestsError } = await supabase\r\n      .from('maintenance_requests')\r\n      .select('id')\r\n      .gte('reported_date', startDate)\r\n      .lte('reported_date', endDate);\r\n    \r\n    if (requestsError) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (requestsError.message.includes('does not exist')) {\r\n        console.warn('Maintenance requests table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw requestsError;\r\n    }\r\n    \r\n    if (!maintenanceRequests || maintenanceRequests.length === 0) {\r\n      console.log('No maintenance requests found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // Get maintenance items for these requests\r\n    const maintenanceIds = maintenanceRequests.map(req => req.id);\r\n    const { data: maintenanceItems, error: itemsError } = await supabase\r\n      .from('maintenance_items')\r\n      .select('*')\r\n      .in('maintenance_id', maintenanceIds);\r\n    \r\n    if (itemsError) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (itemsError.message.includes('does not exist')) {\r\n        console.warn('Maintenance items table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw itemsError;\r\n    }\r\n    \r\n    if (!maintenanceItems || maintenanceItems.length === 0) {\r\n      console.log('No maintenance items found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // 2. Group items by item_id and sum quantities\r\n    const itemQuantities: Record<string, number> = {};\r\n    \r\n    maintenanceItems.forEach(item => {\r\n      if (!itemQuantities[item.item_id]) {\r\n        itemQuantities[item.item_id] = 0;\r\n      }\r\n      itemQuantities[item.item_id] += item.quantity_needed;\r\n    });\r\n    \r\n    // 3. Create a new purchase order\r\n    const { data: purchaseOrder, error: orderError } = await supabase\r\n      .from('purchase_orders')\r\n      .insert([{\r\n        order_date: new Date().toISOString(),\r\n        status: 'draft',\r\n        created_by: createdBy,\r\n        notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')}`\r\n      }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (orderError) throw orderError;\r\n    \r\n    // 4. Create purchase items for each item type\r\n    if (Object.keys(itemQuantities).length > 0) {\r\n      const purchaseItems = Object.entries(itemQuantities).map(([itemId, quantity]) => ({\r\n        purchase_order_id: purchaseOrder.id,\r\n        item_id: itemId,\r\n        quantity: quantity\r\n      }));\r\n      \r\n      const { error: purchaseItemsError } = await supabase\r\n        .from('purchase_items')\r\n        .insert(purchaseItems);\r\n      \r\n      if (purchaseItemsError) throw purchaseItemsError;\r\n    }\r\n    \r\n    return purchaseOrder;\r\n  } catch (error: any) {\r\n    console.error('Error generating monthly purchase order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to create an empty purchase order when no maintenance items are found\r\nconst createEmptyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  const { data: purchaseOrder, error: orderError } = await supabase\r\n    .from('purchase_orders')\r\n    .insert([{\r\n      order_date: new Date().toISOString(),\r\n      status: 'draft',\r\n      created_by: createdBy,\r\n      notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')} (No maintenance items found)`\r\n    }])\r\n    .select()\r\n    .single();\r\n  \r\n  if (orderError) throw orderError;\r\n  return purchaseOrder;\r\n};\r\n\r\n// Process Received Items\r\nexport const processReceivedItems = async (\r\n  purchaseOrderId: string, \r\n  receivedItems: Array<{ id: string, received_quantity: number }>\r\n): Promise<void> => {\r\n  // Start a transaction to update both purchase items and inventory\r\n  for (const item of receivedItems) {\r\n    // 1. Update the purchase item\r\n    const { data: purchaseItem, error: updateError } = await supabase\r\n      .from('purchase_items')\r\n      .update({ received_quantity: item.received_quantity })\r\n      .eq('id', item.id)\r\n      .select('*')\r\n      .single();\r\n    \r\n    if (updateError) throw updateError;\r\n    \r\n    // 2. Update inventory\r\n    // First, get the current inventory for this item\r\n    const { data: currentInventory, error: inventoryError } = await supabase\r\n      .from('inventory')\r\n      .select('*')\r\n      .eq('item_id', purchaseItem.item_id)\r\n      .single();\r\n    \r\n    if (inventoryError && inventoryError.code !== 'PGRST116') {\r\n      throw inventoryError;\r\n    }\r\n    \r\n    // If inventory entry exists, update it\r\n    if (currentInventory) {\r\n      const { error: updateInventoryError } = await supabase\r\n        .from('inventory')\r\n        .update({\r\n          quantity: currentInventory.quantity + item.received_quantity,\r\n          last_updated: new Date().toISOString()\r\n        })\r\n        .eq('id', currentInventory.id);\r\n      \r\n      if (updateInventoryError) throw updateInventoryError;\r\n    } \r\n    // If no inventory entry exists, create one\r\n    else {\r\n      const { error: createInventoryError } = await supabase\r\n        .from('inventory')\r\n        .insert([{\r\n          item_id: purchaseItem.item_id,\r\n          quantity: item.received_quantity,\r\n          unit_price: purchaseItem.unit_price,\r\n          last_updated: new Date().toISOString()\r\n        }]);\r\n      \r\n      if (createInventoryError) throw createInventoryError;\r\n    }\r\n  }\r\n  \r\n  // 3. Update the purchase order status to 'received'\r\n  const { error: orderUpdateError } = await supabase\r\n    .from('purchase_orders')\r\n    .update({ status: 'received' })\r\n    .eq('id', purchaseOrderId);\r\n  \r\n  if (orderUpdateError) throw orderUpdateError;\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/purchase-orders/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { getPurchaseOrders } from '@/lib/services/purchaseService';\r\nimport { PurchaseOrder } from '@/models/types';\r\n\r\nexport default function PurchaseOrdersPage() {\r\n  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Filter state\r\n  const [filterStatus, setFilterStatus] = useState<string>('');\r\n  const [dateRange, setDateRange] = useState<{start: string, end: string}>({\r\n    start: '',\r\n    end: ''\r\n  });\r\n\r\n  // Load purchase orders\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const orders = await getPurchaseOrders(\r\n          filterStatus as PurchaseOrder['status'] || undefined\r\n        );\r\n        setPurchaseOrders(orders);\r\n      } catch (err: any) {\r\n        console.error('Error fetching purchase orders:', err.message || JSON.stringify(err));\r\n        setError(`حدث خطأ أثناء تحميل طلبات الشراء: ${err.message || 'خطأ غير معروف'}. الرجاء المحاولة مرة أخرى.`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [filterStatus]);\r\n\r\n  // Filter by date range\r\n  const filteredOrders = purchaseOrders.filter(order => {\r\n    let includeOrder = true;\r\n    \r\n    // Apply date filters if they exist\r\n    if (dateRange.start) {\r\n      includeOrder = includeOrder && new Date(order.order_date) >= new Date(dateRange.start);\r\n    }\r\n    \r\n    if (dateRange.end) {\r\n      includeOrder = includeOrder && new Date(order.order_date) <= new Date(dateRange.end);\r\n    }\r\n    \r\n    return includeOrder;\r\n  });\r\n\r\n  // Calculate statistics\r\n  const pendingCount = purchaseOrders.filter(order => \r\n    order.status === 'draft' || order.status === 'submitted'\r\n  ).length;\r\n  \r\n  const receivedCount = purchaseOrders.filter(order => \r\n    order.status === 'received'\r\n  ).length;\r\n  \r\n  const completedCount = purchaseOrders.filter(order => \r\n    order.status === 'completed'\r\n  ).length;\r\n\r\n  // Monthly purchase orders (group by month)\r\n  const currentDate = new Date();\r\n  const currentMonth = currentDate.getMonth();\r\n  const currentYear = currentDate.getFullYear();\r\n  \r\n  const thisMonthOrders = purchaseOrders.filter(order => {\r\n    const orderDate = new Date(order.order_date);\r\n    return orderDate.getMonth() === currentMonth && \r\n           orderDate.getFullYear() === currentYear;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold\">طلبات الشراء</h1>\r\n        <div className=\"flex gap-3\">\r\n          <Link href=\"/purchase-orders/monthly\" className=\"btn btn-secondary\">\r\n            إنشاء طلب شهري\r\n          </Link>\r\n          <Link href=\"/purchase-orders/new\" className=\"btn btn-primary\">\r\n            إنشاء طلب شراء\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n        <div className=\"card bg-white\">\r\n          <h3 className=\"text-lg font-medium text-gray-700\">إجمالي الطلبات</h3>\r\n          <p className=\"mt-2 text-3xl font-bold\">{purchaseOrders.length}</p>\r\n        </div>\r\n        \r\n        <div className=\"card bg-yellow-50 border-r-4 border-yellow-500\">\r\n          <h3 className=\"text-lg font-medium text-gray-700\">طلبات معلقة</h3>\r\n          <p className=\"mt-2 text-3xl font-bold\">{pendingCount}</p>\r\n        </div>\r\n        \r\n        <div className=\"card bg-blue-50 border-r-4 border-blue-500\">\r\n          <h3 className=\"text-lg font-medium text-gray-700\">تم الاستلام</h3>\r\n          <p className=\"mt-2 text-3xl font-bold\">{receivedCount}</p>\r\n        </div>\r\n        \r\n        <div className=\"card bg-green-50 border-r-4 border-green-500\">\r\n          <h3 className=\"text-lg font-medium text-gray-700\">مكتملة</h3>\r\n          <p className=\"mt-2 text-3xl font-bold\">{completedCount}</p>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"bg-red-100 border-r-4 border-red-500 text-red-700 p-4 mb-6 rounded-md\">\r\n          <p>{error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Filters */}\r\n      <div className=\"bg-white shadow rounded-lg p-6 mb-6\">\r\n        <h2 className=\"text-lg font-semibold mb-4\">تصفية طلبات الشراء</h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div>\r\n            <label className=\"block mb-2 text-sm font-medium\">الحالة</label>\r\n            <select\r\n              value={filterStatus}\r\n              onChange={(e) => setFilterStatus(e.target.value)}\r\n              className=\"select w-full\"\r\n            >\r\n              <option value=\"\">جميع الحالات</option>\r\n              <option value=\"draft\">مسودة</option>\r\n              <option value=\"submitted\">مقدم</option>\r\n              <option value=\"approved\">معتمد</option>\r\n              <option value=\"ordered\">تم الطلب</option>\r\n              <option value=\"received\">تم الاستلام</option>\r\n              <option value=\"completed\">مكتمل</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div>\r\n            <label className=\"block mb-2 text-sm font-medium\">من تاريخ</label>\r\n            <input\r\n              type=\"date\"\r\n              value={dateRange.start}\r\n              onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\r\n              className=\"input w-full\"\r\n            />\r\n          </div>\r\n          \r\n          <div>\r\n            <label className=\"block mb-2 text-sm font-medium\">إلى تاريخ</label>\r\n            <input\r\n              type=\"date\"\r\n              value={dateRange.end}\r\n              onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\r\n              className=\"input w-full\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Monthly Summary */}\r\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-6\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h2 className=\"text-lg font-semibold\">طلبات الشهر الحالي ({thisMonthOrders.length})</h2>\r\n          {thisMonthOrders.length > 0 && (\r\n            <Link href={`/reports/monthly/${currentYear}/${currentMonth + 1}`} className=\"text-primary hover:underline\">\r\n              عرض التقرير الشهري\r\n            </Link>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n          {thisMonthOrders.slice(0, 3).map(order => (\r\n            <div key={order.id} className=\"border rounded-md p-4 hover:bg-gray-50\">\r\n              <div className=\"flex justify-between items-center mb-2\">\r\n                <h3 className=\"font-medium\">طلب #{order.id.substring(0, 8)}</h3>\r\n                <StatusBadge status={order.status} />\r\n              </div>\r\n              <p className=\"text-gray-600 text-sm mb-2\" dir=\"ltr\">\r\n                {new Date(order.order_date).toLocaleDateString('ar-SA')}\r\n              </p>\r\n              <p className=\"text-gray-700\">\r\n                {order.total_amount ? `${order.total_amount} ريال` : 'المبلغ غير محدد'}\r\n              </p>\r\n              <div className=\"mt-3\">\r\n                <Link href={`/purchase-orders/${order.id}`} className=\"text-primary hover:underline text-sm\">\r\n                  عرض التفاصيل\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          \r\n          {thisMonthOrders.length === 0 && (\r\n            <div className=\"col-span-3 bg-gray-50 p-4 rounded-md text-center text-gray-500\">\r\n              لا توجد طلبات شراء لهذا الشهر\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Purchase Orders Table */}\r\n      <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\r\n        <div className=\"p-4 bg-gray-50 border-b\">\r\n          <h2 className=\"font-semibold text-lg\">جميع طلبات الشراء</h2>\r\n        </div>\r\n        \r\n        {loading ? (\r\n          <div className=\"text-center py-10\">\r\n            <p className=\"text-lg\">جاري تحميل البيانات...</p>\r\n          </div>\r\n        ) : filteredOrders.length === 0 ? (\r\n          <div className=\"text-center py-10\">\r\n            <p className=\"text-lg text-gray-500\">لا توجد طلبات شراء مطابقة للمعايير المحددة.</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200\">\r\n              <thead className=\"bg-gray-50\">\r\n                <tr>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    رقم الطلب\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    التاريخ\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    الحالة\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    المبلغ الإجمالي\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    المورد\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    منشئ الطلب\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    إجراءات\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                {filteredOrders.map((order) => (\r\n                  <tr key={order.id} className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                      #{order.id.substring(0, 8)}\r\n                    </td>\r\n                    <td className=\"px-4 py-4 whitespace-nowrap\" dir=\"ltr\">\r\n                      {new Date(order.order_date).toLocaleDateString('ar-SA')}\r\n                    </td>\r\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                      <StatusBadge status={order.status} />\r\n                    </td>\r\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                      {order.total_amount ? `${order.total_amount} ريال` : 'غير محدد'}\r\n                    </td>\r\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                      {order.vendor || 'غير محدد'}\r\n                    </td>\r\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                      {order.created_by}\r\n                    </td>\r\n                    <td className=\"px-4 py-4 whitespace-nowrap text-sm\">\r\n                      <Link \r\n                        href={`/purchase-orders/${order.id}`}\r\n                        className=\"text-secondary hover:underline ml-2\"\r\n                      >\r\n                        عرض\r\n                      </Link>\r\n                      \r\n                      {(order.status === 'draft' || order.status === 'submitted') && (\r\n                        <Link \r\n                          href={`/purchase-orders/${order.id}/edit`}\r\n                          className=\"text-primary hover:underline ml-2\"\r\n                        >\r\n                          تحرير\r\n                        </Link>\r\n                      )}\r\n                      \r\n                      {order.status === 'ordered' && (\r\n                        <Link \r\n                          href={`/purchase-orders/${order.id}/receive`}\r\n                          className=\"text-accent hover:underline\"\r\n                        >\r\n                          استلام\r\n                        </Link>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper component for status badges\r\nfunction StatusBadge({ status }: { status: PurchaseOrder['status'] }) {\r\n  const statusColors: Record<PurchaseOrder['status'], { bg: string; text: string; label: string }> = {\r\n    draft: { bg: 'bg-gray-100', text: 'text-gray-800', label: 'مسودة' },\r\n    submitted: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'مقدم' },\r\n    approved: { bg: 'bg-green-100', text: 'text-green-800', label: 'معتمد' },\r\n    ordered: { bg: 'bg-purple-100', text: 'text-purple-800', label: 'تم الطلب' },\r\n    received: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'تم الاستلام' },\r\n    completed: { bg: 'bg-green-100', text: 'text-green-800', label: 'مكتمل' },\r\n  };\r\n\r\n  const { bg, text, label } = statusColors[status] || { bg: 'bg-gray-100', text: 'text-gray-800', label: status };\r\n\r\n  return (\r\n    <span className={`${bg} ${text} px-2 py-1 rounded-full text-xs`}>\r\n      {label}\r\n    </span>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}