{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["import { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nconst poolInstance = new Pool({\r\n  connectionString,\r\n  max: 20, // زيادة عدد الاتصالات المتزامنة\r\n  idleTimeoutMillis: 30000, // وقت انتظار أطول\r\n  connectionTimeoutMillis: 5000, // مهلة اتصال أقصر\r\n});\r\n\r\n// إصدار تجمع الاتصالات للاستخدام في الوظائف الأخرى\r\nexport const pool = poolInstance;\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات مع إعادة المحاولة\r\nexport async function query(text: string, params?: any[], retries = 3) {\r\n  let lastError;\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    const client = await poolInstance.connect().catch(err => {\r\n      console.error(`فشل الاتصال بقاعدة البيانات (محاولة ${attempt + 1}/${retries}):`, err.message);\r\n      return null;\r\n    });\r\n    \r\n    if (!client) {\r\n      lastError = new Error('تعذر إنشاء اتصال بقاعدة البيانات');\r\n      continue;\r\n    }\r\n    \r\n    try {\r\n      const result = await client.query(text, params);\r\n      return result;\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`فشل الاستعلام (محاولة ${attempt + 1}/${retries}):`, error.message);\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n  \r\n  // إذا وصلنا إلى هنا، فقد فشلت جميع المحاولات\r\n  throw lastError || new Error('فشل الاستعلام بعد عدة محاولات');\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()', [], 1);\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// وظيفة مساعدة للحصول على بيانات آمنة\r\nexport async function safeQuery(text: string, params?: any[], defaultValue: any = []) {\r\n  try {\r\n    const result = await query(text, params);\r\n    return result.rows || defaultValue;\r\n  } catch (error) {\r\n    console.error('فشل الاستعلام، استخدام القيمة الافتراضية:', error);\r\n    return defaultValue;\r\n  }\r\n}"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAEA,mDAAmD;AACnD,MAAM,mBAAmB;AAEzB,qCAAqC;AACrC,MAAM,eAAe,IAAI,oGAAA,CAAA,OAAI,CAAC;IAC5B;IACA,KAAK;IACL,mBAAmB;IACnB,yBAAyB;AAC3B;AAGO,MAAM,OAAO;AAGb,eAAe,MAAM,IAAY,EAAE,MAAc,EAAE,UAAU,CAAC;IACnE,IAAI;IACJ,IAAK,IAAI,UAAU,GAAG,UAAU,SAAS,UAAW;QAClD,MAAM,SAAS,MAAM,aAAa,OAAO,GAAG,KAAK,CAAC,CAAA;YAChD,QAAQ,KAAK,CAAC,CAAC,oCAAoC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,OAAO;YAC5F,OAAO;QACT;QAEA,IAAI,CAAC,QAAQ;YACX,YAAY,IAAI,MAAM;YACtB;QACF;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;YACxC,OAAO;QACT,EAAE,OAAO,OAAY;YACnB,YAAY;YACZ,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,OAAO;QAClF,SAAU;YACR,OAAO,OAAO;QAChB;IACF;IAEA,6CAA6C;IAC7C,MAAM,aAAa,IAAI,MAAM;AAC/B;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,MAAM,gBAAgB,EAAE,EAAE;QAC/C,QAAQ,GAAG,CAAC,kCAAkC,OAAO,IAAI,CAAC,EAAE;QAC5D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;IACT;AACF;AAGO,eAAe,UAAU,IAAY,EAAE,MAAc,EAAE,eAAoB,EAAE;IAClF,IAAI;QACF,MAAM,SAAS,MAAM,MAAM,MAAM;QACjC,OAAO,OAAO,IAAI,IAAI;IACxB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/inventoryService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { Category, Item, Inventory } from '@/models/types';\r\n\r\n// Category Operations\r\nexport const getCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    return await safeQuery('SELECT * FROM categories', [], []);\r\n  } catch (err) {\r\n    console.error('Error in getCategories:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (id: string): Promise<Category | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM categories WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getCategoryById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createCategory = async (category: Omit<Category, 'id'>): Promise<Category> => {\r\n  try {\r\n    const fields = Object.keys(category).join(', ');\r\n    const placeholders = Object.keys(category).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(category);\r\n    \r\n    const sql = `\r\n      INSERT INTO categories (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateCategory = async (id: string, updates: Partial<Category>): Promise<Category> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE categories \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteCategory = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM categories WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Item Operations\r\nexport const getItems = async (categoryId?: string): Promise<Item[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM items';\r\n    const params: any[] = [];\r\n    \r\n    if (categoryId) {\r\n      params.push(categoryId);\r\n      sql += ' WHERE category_id = $1';\r\n    }\r\n    \r\n    const result = await query(sql, params);\r\n    return result.rows || [];\r\n  } catch (err) {\r\n    console.error('Error in getItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getItemById = async (id: string): Promise<Item | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM items WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createItem = async (item: Omit<Item, 'id'>): Promise<Item> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateItem = async (id: string, updates: Partial<Item>): Promise<Item> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Inventory Operations\r\nexport const getInventory = async (itemId?: string): Promise<Inventory[]> => {\r\n  try {\r\n    let sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name as item_name, \r\n             it.category_id, \r\n             it.unit\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n    `;\r\n    \r\n    const params: any[] = [];\r\n    if (itemId) {\r\n      params.push(itemId);\r\n      sql += ' WHERE i.item_id = $1';\r\n    }\r\n    \r\n    const rows = await safeQuery(sql, params, []);\r\n    \r\n    // Format the result to match the expected structure\r\n    return rows.map((row: {\r\n      id: string;\r\n      item_id: string;\r\n      item_name: string;\r\n      category_id: string;\r\n      unit: string;\r\n      quantity: number;\r\n      last_updated: string;\r\n    }) => ({\r\n      ...row,\r\n      items: {\r\n      id: row.item_id,\r\n      name: row.item_name,\r\n      category_id: row.category_id,\r\n      unit: row.unit\r\n      }\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getInventory:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getInventoryItemById = async (id: string): Promise<Inventory | null> => {\r\n  try {\r\n    const sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name as item_name, \r\n             it.category_id, \r\n             it.unit\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n      WHERE i.id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [id]);\r\n    \r\n    if (result.rows.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Format the result to match the expected structure\r\n    const row = result.rows[0];\r\n    return {\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    };\r\n  } catch (err) {\r\n    console.error('Error in getInventoryItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateInventoryQuantity = async (\r\n  itemId: string, \r\n  quantityChange: number\r\n): Promise<Inventory> => {\r\n  try {\r\n    // First, get the current inventory item\r\n    const currentInventoryResult = await query(\r\n      'SELECT * FROM inventory WHERE item_id = $1',\r\n      [itemId]\r\n    );\r\n    \r\n    const currentInventory = currentInventoryResult.rows[0];\r\n    \r\n    // If inventory item exists, update it\r\n    if (currentInventory) {\r\n      const newQuantity = currentInventory.quantity + quantityChange;\r\n      \r\n      if (newQuantity < 0) {\r\n        throw new Error('Insufficient inventory quantity');\r\n      }\r\n      \r\n      const result = await query(\r\n        'UPDATE inventory SET quantity = $1, last_updated = $2 WHERE id = $3 RETURNING *',\r\n        [newQuantity, new Date().toISOString(), currentInventory.id]\r\n      );\r\n      \r\n      return result.rows[0];\r\n    } \r\n    // If inventory item does not exist, create it (only if adding quantity)\r\n    else if (quantityChange > 0) {\r\n      const result = await query(\r\n        'INSERT INTO inventory (item_id, quantity, last_updated) VALUES ($1, $2, $3) RETURNING *',\r\n        [itemId, quantityChange, new Date().toISOString()]\r\n      );\r\n      \r\n      return result.rows[0];\r\n    } else {\r\n      throw new Error('Cannot reduce quantity of non-existent inventory item');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error in updateInventoryQuantity:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateInventoryItem = async (\r\n  id: string, \r\n  updates: Partial<Inventory>\r\n): Promise<Inventory> => {\r\n  try {\r\n    const updateData = {\r\n      ...updates,\r\n      last_updated: new Date().toISOString()\r\n    };\r\n    \r\n    const fields = Object.keys(updateData);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updateData), id];\r\n    \r\n    const result = await query(\r\n      `UPDATE inventory SET ${setClause} WHERE id = $${fields.length + 1} RETURNING *`,\r\n      values\r\n    );\r\n    \r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateInventoryItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getLowStockItems = async (threshold: number = 10): Promise<{ id: string; item_id: string; quantity: number; last_updated: string; name: string; category: string; unit: string }[]> => {\r\n  try {\r\n    const sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name, \r\n             it.category_id, \r\n             it.unit,\r\n             c.name as category\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n      LEFT JOIN categories c ON it.category_id = c.id\r\n      WHERE i.quantity <= $1\r\n    `;\r\n    \r\n    const rows = await safeQuery(sql, [threshold], []);\r\n    \r\n    // Format the result to match the expected structure\r\n    return rows.map((row: { id: string; item_id: string; quantity: number; last_updated: string; name: string; category: string; unit: string }) => ({\r\n      id: row.id,\r\n      item_id: row.item_id,\r\n      quantity: row.quantity,\r\n      last_updated: row.last_updated,\r\n      name: row.name,\r\n      category: row.category,\r\n      unit: row.unit\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getLowStockItems:', err);\r\n    return [];\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/server-actions/inventory-actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { \r\n  getInventory,\r\n  getLowStockItems,\r\n  getCategories,\r\n  getItems,\r\n  getItemById,\r\n  createItem,\r\n  updateItem,\r\n  updateInventoryQuantity\r\n} from '@/lib/services/inventoryService';\r\nimport { Item, InventoryWithItem } from '@/models/types';\r\n\r\nexport async function getInventoryAction(itemId?: string) {\r\n  try {\r\n    const inventory = await getInventory(itemId);\r\n    return { data: inventory, error: null };\r\n  } catch (error: any) {\r\n    console.error('خطأ في جلب بيانات المخزون:', error);\r\n    return { data: [], error: `فشل في جلب بيانات المخزون: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function getLowStockItemsAction(threshold: number = 10) {\r\n  try {\r\n    const items = await getLowStockItems(threshold);\r\n    return { data: items, error: null };\r\n  } catch (error: any) {\r\n    console.error('خطأ في جلب العناصر منخفضة المخزون:', error);\r\n    return { data: [], error: `فشل في جلب العناصر منخفضة المخزون: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function getCategoriesAction() {\r\n  try {\r\n    const categories = await getCategories();\r\n    return { data: categories, error: null };\r\n  } catch (error: any) {\r\n    console.error('خطأ في جلب الفئات:', error);\r\n    return { data: [], error: `فشل في جلب الفئات: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function getItemsAction(categoryId?: string) {\r\n  try {\r\n    const items = await getItems(categoryId);\r\n    return { data: items, error: null };\r\n  } catch (error: any) {\r\n    console.error('خطأ في جلب العناصر:', error);\r\n    return { data: [], error: `فشل في جلب العناصر: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function getItemByIdAction(id: string) {\r\n  try {\r\n    const item = await getItemById(id);\r\n    return { data: item, error: null };\r\n  } catch (error: any) {\r\n    console.error(`خطأ في جلب العنصر رقم ${id}:`, error);\r\n    return { data: null, error: `فشل في جلب العنصر: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function createItemAction(item: Omit<Item, 'id'>) {\r\n  try {\r\n    const newItem = await createItem(item);\r\n    return { data: newItem, error: null };\r\n  } catch (error: any) {\r\n    console.error('خطأ في إنشاء عنصر جديد:', error);\r\n    return { data: null, error: `فشل في إنشاء العنصر: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function updateItemAction(id: string, updates: Partial<Item>) {\r\n  try {\r\n    const updatedItem = await updateItem(id, updates);\r\n    return { data: updatedItem, error: null };\r\n  } catch (error: any) {\r\n    console.error(`خطأ في تحديث العنصر رقم ${id}:`, error);\r\n    return { data: null, error: `فشل في تحديث العنصر: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}\r\n\r\nexport async function updateInventoryQuantityAction(itemId: string, quantityChange: number) {\r\n  try {\r\n    const updatedInventory = await updateInventoryQuantity(itemId, quantityChange);\r\n    return { data: updatedInventory, error: null };\r\n  } catch (error: any) {\r\n    console.error(`خطأ في تحديث كمية المخزون للعنصر رقم ${itemId}:`, error);\r\n    return { data: null, error: `فشل في تحديث كمية المخزون: ${error.message || 'خطأ غير معروف'}` };\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/.next-internal/server/app/inventory/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getInventoryAction as '404fa6998a25bd6df7763bdd9542da276326616b77'} from 'ACTIONS_MODULE0'\nexport {getCategoriesAction as '00c6e5b21a5046bd2746e640af967b35e4c7524cc3'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/inventory/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/inventory/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/inventory/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 664, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/inventory/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/inventory/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/inventory/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}