{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["'use server';\r\n\r\nimport { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nexport const pool = new Pool({\r\n  connectionString,\r\n  max: 20, // زيادة عدد الاتصالات المتزامنة\r\n  idleTimeoutMillis: 30000, // وقت انتظار أطول\r\n  connectionTimeoutMillis: 5000, // مهلة اتصال أقصر\r\n});\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات مع إعادة المحاولة\r\nexport async function query(text: string, params?: any[], retries = 3) {\r\n  let lastError;\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    const client = await pool.connect().catch(err => {\r\n      console.error(`فشل الاتصال بقاعدة البيانات (محاولة ${attempt + 1}/${retries}):`, err.message);\r\n      return null;\r\n    });\r\n    \r\n    if (!client) {\r\n      lastError = new Error('تعذر إنشاء اتصال بقاعدة البيانات');\r\n      continue;\r\n    }\r\n    \r\n    try {\r\n      const result = await client.query(text, params);\r\n      return result;\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`فشل الاستعلام (محاولة ${attempt + 1}/${retries}):`, error.message);\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n  \r\n  // إذا وصلنا إلى هنا، فقد فشلت جميع المحاولات\r\n  throw lastError || new Error('فشل الاستعلام بعد عدة محاولات');\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()', [], 1);\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// وظيفة مساعدة للحصول على بيانات آمنة\r\nexport async function safeQuery(text: string, params?: any[], defaultValue: any = []) {\r\n  try {\r\n    const result = await query(text, params);\r\n    return result.rows || defaultValue;\r\n  } catch (error) {\r\n    console.error('فشل الاستعلام، استخدام القيمة الافتراضية:', error);\r\n    return defaultValue;\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IAgBsB,QAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["'use server';\r\n\r\nimport { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nexport const pool = new Pool({\r\n  connectionString,\r\n  max: 20, // زيادة عدد الاتصالات المتزامنة\r\n  idleTimeoutMillis: 30000, // وقت انتظار أطول\r\n  connectionTimeoutMillis: 5000, // مهلة اتصال أقصر\r\n});\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات مع إعادة المحاولة\r\nexport async function query(text: string, params?: any[], retries = 3) {\r\n  let lastError;\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    const client = await pool.connect().catch(err => {\r\n      console.error(`فشل الاتصال بقاعدة البيانات (محاولة ${attempt + 1}/${retries}):`, err.message);\r\n      return null;\r\n    });\r\n    \r\n    if (!client) {\r\n      lastError = new Error('تعذر إنشاء اتصال بقاعدة البيانات');\r\n      continue;\r\n    }\r\n    \r\n    try {\r\n      const result = await client.query(text, params);\r\n      return result;\r\n    } catch (error: any) {\r\n      lastError = error;\r\n      console.error(`فشل الاستعلام (محاولة ${attempt + 1}/${retries}):`, error.message);\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n  \r\n  // إذا وصلنا إلى هنا، فقد فشلت جميع المحاولات\r\n  throw lastError || new Error('فشل الاستعلام بعد عدة محاولات');\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()', [], 1);\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// وظيفة مساعدة للحصول على بيانات آمنة\r\nexport async function safeQuery(text: string, params?: any[], defaultValue: any = []) {\r\n  try {\r\n    const result = await query(text, params);\r\n    return result.rows || defaultValue;\r\n  } catch (error) {\r\n    console.error('فشل الاستعلام، استخدام القيمة الافتراضية:', error);\r\n    return defaultValue;\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IAyDsB,YAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/maintenanceService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { MaintenanceRequest, MaintenanceItem } from '@/models/types';\r\n\r\n// Maintenance Request Operations\r\nexport const getMaintenanceRequests = async (\r\n  complexId?: string, \r\n  buildingId?: string, \r\n  status?: MaintenanceRequest['status']\r\n): Promise<MaintenanceRequest[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM maintenance_requests WHERE 1=1';\r\n    const params: any[] = [];\r\n    \r\n    if (complexId) {\r\n      params.push(complexId);\r\n      sql += ` AND complex_id = $${params.length}`;\r\n    }\r\n    \r\n    if (buildingId) {\r\n      params.push(buildingId);\r\n      sql += ` AND building_id = $${params.length}`;\r\n    }\r\n    \r\n    if (status) {\r\n      params.push(status);\r\n      sql += ` AND status = $${params.length}`;\r\n    }\r\n    \r\n    sql += ' ORDER BY reported_date DESC';\r\n    \r\n    return await safeQuery(sql, params, []);\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceRequests:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getMaintenanceRequestById = async (id: string): Promise<MaintenanceRequest | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM maintenance_requests WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceRequestById:', err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createMaintenanceRequest = async (\r\n  request: Omit<MaintenanceRequest, 'id' | 'reported_date'>\r\n): Promise<MaintenanceRequest> => {\r\n  try {\r\n    const newRequest = {\r\n      ...request,\r\n      reported_date: new Date().toISOString(),\r\n      status: request.status || 'pending'\r\n    };\r\n    \r\n    const fields = Object.keys(newRequest).join(', ');\r\n    const placeholders = Object.keys(newRequest).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(newRequest);\r\n    \r\n    const sql = `\r\n      INSERT INTO maintenance_requests (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createMaintenanceRequest:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateMaintenanceRequest = async (\r\n  id: string, \r\n  updates: Partial<MaintenanceRequest>\r\n): Promise<MaintenanceRequest> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE maintenance_requests \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateMaintenanceRequest:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteMaintenanceRequest = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM maintenance_requests WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteMaintenanceRequest:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Maintenance Items Operations\r\nexport const getMaintenanceItems = async (\r\n  maintenanceId: string\r\n): Promise<MaintenanceItem[]> => {\r\n  try {\r\n    const result = await query('SELECT * FROM maintenance_items WHERE maintenance_id = $1', [maintenanceId]);\r\n    return result.rows || [];\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getMaintenanceItemById = async (id: string): Promise<MaintenanceItem | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM maintenance_items WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createMaintenanceItem = async (\r\n  item: Omit<MaintenanceItem, 'id'>\r\n): Promise<MaintenanceItem> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO maintenance_items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createMaintenanceItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateMaintenanceItem = async (\r\n  id: string, \r\n  updates: Partial<MaintenanceItem>\r\n): Promise<MaintenanceItem> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE maintenance_items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateMaintenanceItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteMaintenanceItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM maintenance_items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteMaintenanceItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Get maintenance requests for monthly summary\r\nexport const getMonthlyMaintenanceRequests = async (\r\n  year: number,\r\n  month: number\r\n): Promise<MaintenanceRequest[]> => {\r\n  try {\r\n    // Create start and end date for the specified month\r\n    const startDate = new Date(year, month - 1, 1).toISOString();\r\n    const endDate = new Date(year, month, 0).toISOString();\r\n    \r\n    const sql = `\r\n      SELECT * FROM maintenance_requests\r\n      WHERE reported_date >= $1 AND reported_date <= $2\r\n    `;\r\n    \r\n    return await safeQuery(sql, [startDate, endDate], []);\r\n  } catch (err) {\r\n    console.error('Error in getMonthlyMaintenanceRequests:', err);\r\n    return [];\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/inventoryService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { Category, Item, Inventory } from '@/models/types';\r\n\r\n// Category Operations\r\nexport const getCategories = async (): Promise<Category[]> => {\r\n  try {\r\n    return await safeQuery('SELECT * FROM categories', [], []);\r\n  } catch (err) {\r\n    console.error('Error in getCategories:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (id: string): Promise<Category | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM categories WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getCategoryById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createCategory = async (category: Omit<Category, 'id'>): Promise<Category> => {\r\n  try {\r\n    const fields = Object.keys(category).join(', ');\r\n    const placeholders = Object.keys(category).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(category);\r\n    \r\n    const sql = `\r\n      INSERT INTO categories (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateCategory = async (id: string, updates: Partial<Category>): Promise<Category> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE categories \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteCategory = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM categories WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteCategory:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Item Operations\r\nexport const getItems = async (categoryId?: string): Promise<Item[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM items';\r\n    const params: any[] = [];\r\n    \r\n    if (categoryId) {\r\n      params.push(categoryId);\r\n      sql += ' WHERE category_id = $1';\r\n    }\r\n    \r\n    const result = await query(sql, params);\r\n    return result.rows || [];\r\n  } catch (err) {\r\n    console.error('Error in getItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getItemById = async (id: string): Promise<Item | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM items WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createItem = async (item: Omit<Item, 'id'>): Promise<Item> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateItem = async (id: string, updates: Partial<Item>): Promise<Item> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deleteItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deleteItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Inventory Operations\r\nexport const getInventory = async (itemId?: string): Promise<Inventory[]> => {\r\n  try {\r\n    let sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name as item_name, \r\n             it.category_id, \r\n             it.unit\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n    `;\r\n    \r\n    const params: any[] = [];\r\n    if (itemId) {\r\n      params.push(itemId);\r\n      sql += ' WHERE i.item_id = $1';\r\n    }\r\n    \r\n    const rows = await safeQuery(sql, params, []);\r\n    \r\n    // Format the result to match the expected structure\r\n    return rows.map((row: {\r\n      id: string;\r\n      item_id: string;\r\n      item_name: string;\r\n      category_id: string;\r\n      unit: string;\r\n      quantity: number;\r\n      last_updated: string;\r\n    }) => ({\r\n      ...row,\r\n      items: {\r\n      id: row.item_id,\r\n      name: row.item_name,\r\n      category_id: row.category_id,\r\n      unit: row.unit\r\n      }\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getInventory:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getInventoryItemById = async (id: string): Promise<Inventory | null> => {\r\n  try {\r\n    const sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name as item_name, \r\n             it.category_id, \r\n             it.unit\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n      WHERE i.id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [id]);\r\n    \r\n    if (result.rows.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Format the result to match the expected structure\r\n    const row = result.rows[0];\r\n    return {\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    };\r\n  } catch (err) {\r\n    console.error('Error in getInventoryItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateInventoryQuantity = async (\r\n  itemId: string, \r\n  quantityChange: number\r\n): Promise<Inventory> => {\r\n  try {\r\n    // First, get the current inventory item\r\n    const currentInventoryResult = await query(\r\n      'SELECT * FROM inventory WHERE item_id = $1',\r\n      [itemId]\r\n    );\r\n    \r\n    const currentInventory = currentInventoryResult.rows[0];\r\n    \r\n    // If inventory item exists, update it\r\n    if (currentInventory) {\r\n      const newQuantity = currentInventory.quantity + quantityChange;\r\n      \r\n      if (newQuantity < 0) {\r\n        throw new Error('Insufficient inventory quantity');\r\n      }\r\n      \r\n      const result = await query(\r\n        'UPDATE inventory SET quantity = $1, last_updated = $2 WHERE id = $3 RETURNING *',\r\n        [newQuantity, new Date().toISOString(), currentInventory.id]\r\n      );\r\n      \r\n      return result.rows[0];\r\n    } \r\n    // If inventory item does not exist, create it (only if adding quantity)\r\n    else if (quantityChange > 0) {\r\n      const result = await query(\r\n        'INSERT INTO inventory (item_id, quantity, last_updated) VALUES ($1, $2, $3) RETURNING *',\r\n        [itemId, quantityChange, new Date().toISOString()]\r\n      );\r\n      \r\n      return result.rows[0];\r\n    } else {\r\n      throw new Error('Cannot reduce quantity of non-existent inventory item');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error in updateInventoryQuantity:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updateInventoryItem = async (\r\n  id: string, \r\n  updates: Partial<Inventory>\r\n): Promise<Inventory> => {\r\n  try {\r\n    const updateData = {\r\n      ...updates,\r\n      last_updated: new Date().toISOString()\r\n    };\r\n    \r\n    const fields = Object.keys(updateData);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updateData), id];\r\n    \r\n    const result = await query(\r\n      `UPDATE inventory SET ${setClause} WHERE id = $${fields.length + 1} RETURNING *`,\r\n      values\r\n    );\r\n    \r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updateInventoryItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getLowStockItems = async (threshold: number = 10): Promise<{ id: string; item_id: string; quantity: number; last_updated: string; name: string; category: string; unit: string }[]> => {\r\n  try {\r\n    const sql = `\r\n      SELECT i.*, \r\n             it.id as item_id, \r\n             it.name, \r\n             it.category_id, \r\n             it.unit,\r\n             c.name as category\r\n      FROM inventory i\r\n      LEFT JOIN items it ON i.item_id = it.id\r\n      LEFT JOIN categories c ON it.category_id = c.id\r\n      WHERE i.quantity <= $1\r\n    `;\r\n    \r\n    const rows = await safeQuery(sql, [threshold], []);\r\n    \r\n    // Format the result to match the expected structure\r\n    return rows.map((row: { id: string; item_id: string; quantity: number; last_updated: string; name: string; category: string; unit: string }) => ({\r\n      id: row.id,\r\n      item_id: row.item_id,\r\n      quantity: row.quantity,\r\n      last_updated: row.last_updated,\r\n      name: row.name,\r\n      category: row.category,\r\n      unit: row.unit\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getLowStockItems:', err);\r\n    return [];\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/purchaseService.ts"],"sourcesContent":["import { query, safeQuery } from '../neondb';\r\nimport { PurchaseOrder, PurchaseItem } from '@/models/types';\r\n\r\n// Purchase Order Operations\r\nexport const getPurchaseOrders = async (\r\n  status?: PurchaseOrder['status']\r\n): Promise<PurchaseOrder[]> => {\r\n  try {\r\n    let sql = 'SELECT * FROM purchase_orders WHERE 1=1';\r\n    const params: any[] = [];\r\n    \r\n    if (status) {\r\n      params.push(status);\r\n      sql += ` AND status = $${params.length}`;\r\n    }\r\n    \r\n    sql += ' ORDER BY order_date DESC';\r\n    \r\n    return await safeQuery(sql, params, []);\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseOrders:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getPurchaseOrderById = async (id: string): Promise<PurchaseOrder | null> => {\r\n  try {\r\n    const result = await query('SELECT * FROM purchase_orders WHERE id = $1', [id]);\r\n    return result.rows[0] || null;\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseOrderById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createPurchaseOrder = async (\r\n  order: Omit<PurchaseOrder, 'id' | 'order_date'>\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    const newOrder = {\r\n      ...order,\r\n      order_date: new Date().toISOString(),\r\n      status: order.status || 'draft'\r\n    };\r\n    \r\n    const fields = Object.keys(newOrder).join(', ');\r\n    const placeholders = Object.keys(newOrder).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(newOrder);\r\n    \r\n    const sql = `\r\n      INSERT INTO purchase_orders (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createPurchaseOrder:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updatePurchaseOrder = async (\r\n  id: string, \r\n  updates: Partial<PurchaseOrder>\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE purchase_orders \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updatePurchaseOrder:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deletePurchaseOrder = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM purchase_orders WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deletePurchaseOrder:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Purchase Items Operations\r\nexport const getPurchaseItems = async (\r\n  purchaseOrderId: string\r\n): Promise<PurchaseItem[]> => {\r\n  try {\r\n    const sql = `\r\n      SELECT pi.*, \r\n             i.id as item_id, \r\n             i.name as item_name, \r\n             i.category_id, \r\n             i.unit\r\n      FROM purchase_items pi\r\n      LEFT JOIN items i ON pi.item_id = i.id\r\n      WHERE pi.purchase_order_id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [purchaseOrderId]);\r\n    \r\n    // Format the result to match the expected structure\r\n    return result.rows.map(row => ({\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    }));\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseItems:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getPurchaseItemById = async (id: string): Promise<PurchaseItem | null> => {\r\n  try {\r\n    const sql = `\r\n      SELECT pi.*, \r\n             i.id as item_id, \r\n             i.name as item_name, \r\n             i.category_id, \r\n             i.unit\r\n      FROM purchase_items pi\r\n      LEFT JOIN items i ON pi.item_id = i.id\r\n      WHERE pi.id = $1\r\n    `;\r\n    \r\n    const result = await query(sql, [id]);\r\n    \r\n    if (result.rows.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Format the result to match the expected structure\r\n    const row = result.rows[0];\r\n    return {\r\n      ...row,\r\n      items: {\r\n        id: row.item_id,\r\n        name: row.item_name,\r\n        category_id: row.category_id,\r\n        unit: row.unit\r\n      }\r\n    };\r\n  } catch (err) {\r\n    console.error('Error in getPurchaseItemById:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const createPurchaseItem = async (\r\n  item: Omit<PurchaseItem, 'id'>\r\n): Promise<PurchaseItem> => {\r\n  try {\r\n    const fields = Object.keys(item).join(', ');\r\n    const placeholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n    const values = Object.values(item);\r\n    \r\n    const sql = `\r\n      INSERT INTO purchase_items (${fields}) \r\n      VALUES (${placeholders})\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in createPurchaseItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const updatePurchaseItem = async (\r\n  id: string, \r\n  updates: Partial<PurchaseItem>\r\n): Promise<PurchaseItem> => {\r\n  try {\r\n    const fields = Object.keys(updates);\r\n    const setClause = fields.map((field, i) => `${field} = $${i + 1}`).join(', ');\r\n    const values = [...Object.values(updates), id];\r\n    \r\n    const sql = `\r\n      UPDATE purchase_items \r\n      SET ${setClause} \r\n      WHERE id = $${fields.length + 1}\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await query(sql, values);\r\n    return result.rows[0];\r\n  } catch (err) {\r\n    console.error('Error in updatePurchaseItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const deletePurchaseItem = async (id: string): Promise<void> => {\r\n  try {\r\n    await query('DELETE FROM purchase_items WHERE id = $1', [id]);\r\n  } catch (err) {\r\n    console.error('Error in deletePurchaseItem:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Generate Monthly Purchase Orders\r\nexport const generateMonthlyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  try {\r\n    // 1. Get all maintenance requests for the month\r\n    const startDate = new Date(year, month - 1, 1).toISOString();\r\n    const endDate = new Date(year, month, 0).toISOString();\r\n    \r\n    // Get all maintenance requests for the specified month first\r\n    let result;\r\n    try {\r\n      result = await query(\r\n        'SELECT id FROM maintenance_requests WHERE reported_date >= $1 AND reported_date <= $2',\r\n        [startDate, endDate]\r\n      );\r\n    } catch (err: any) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (err.message.includes('does not exist')) {\r\n        console.warn('Maintenance requests table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw err;\r\n    }\r\n    \r\n    const maintenanceRequests = result.rows;\r\n    \r\n    if (!maintenanceRequests || maintenanceRequests.length === 0) {\r\n      console.log('No maintenance requests found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // Get maintenance items for these requests\r\n    const maintenanceIds = maintenanceRequests.map(req => req.id);\r\n    const placeholders = maintenanceIds.map((_, i) => `$${i + 1}`).join(',');\r\n    \r\n    let itemsResult;\r\n    try {\r\n      itemsResult = await query(\r\n        `SELECT * FROM maintenance_items WHERE maintenance_id IN (${placeholders})`,\r\n        maintenanceIds\r\n      );\r\n    } catch (err: any) {\r\n      // If the table doesn't exist, create a purchase order without items\r\n      if (err.message.includes('does not exist')) {\r\n        console.warn('Maintenance items table does not exist yet. Creating empty purchase order.');\r\n        return createEmptyPurchaseOrder(year, month, createdBy);\r\n      }\r\n      throw err;\r\n    }\r\n    \r\n    const maintenanceItems = itemsResult.rows;\r\n    \r\n    if (!maintenanceItems || maintenanceItems.length === 0) {\r\n      console.log('No maintenance items found for the specified month. Creating empty purchase order.');\r\n      return createEmptyPurchaseOrder(year, month, createdBy);\r\n    }\r\n    \r\n    // 2. Group items by item_id and sum quantities\r\n    const itemQuantities: Record<string, number> = {};\r\n    \r\n    maintenanceItems.forEach(item => {\r\n      if (!itemQuantities[item.item_id]) {\r\n        itemQuantities[item.item_id] = 0;\r\n      }\r\n      itemQuantities[item.item_id] += item.quantity_needed;\r\n    });\r\n    \r\n    // 3. Create a new purchase order\r\n    const newOrder = {\r\n      order_date: new Date().toISOString(),\r\n      status: 'draft',\r\n      created_by: createdBy,\r\n      notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')}`\r\n    };\r\n    \r\n    const orderFields = Object.keys(newOrder).join(', ');\r\n    const orderPlaceholders = Object.keys(newOrder).map((_, i) => `$${i + 1}`).join(', ');\r\n    const orderValues = Object.values(newOrder);\r\n    \r\n    const orderResult = await query(\r\n      `INSERT INTO purchase_orders (${orderFields}) VALUES (${orderPlaceholders}) RETURNING *`,\r\n      orderValues\r\n    );\r\n    \r\n    const purchaseOrder = orderResult.rows[0];\r\n    \r\n    // 4. Create purchase items for each item type\r\n    if (Object.keys(itemQuantities).length > 0) {\r\n      const purchaseItems = Object.entries(itemQuantities).map(([itemId, quantity]) => ({\r\n        purchase_order_id: purchaseOrder.id,\r\n        item_id: itemId,\r\n        quantity: quantity\r\n      }));\r\n      \r\n      for (const item of purchaseItems) {\r\n        const itemFields = Object.keys(item).join(', ');\r\n        const itemPlaceholders = Object.keys(item).map((_, i) => `$${i + 1}`).join(', ');\r\n        const itemValues = Object.values(item);\r\n        \r\n        await query(\r\n          `INSERT INTO purchase_items (${itemFields}) VALUES (${itemPlaceholders})`,\r\n          itemValues\r\n        );\r\n      }\r\n    }\r\n    \r\n    return purchaseOrder;\r\n  } catch (error: any) {\r\n    console.error('Error generating monthly purchase order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to create an empty purchase order when no maintenance items are found\r\nconst createEmptyPurchaseOrder = async (\r\n  year: number,\r\n  month: number,\r\n  createdBy: string\r\n): Promise<PurchaseOrder> => {\r\n  const newOrder = {\r\n    order_date: new Date().toISOString(),\r\n    status: 'draft',\r\n    created_by: createdBy,\r\n    notes: `Auto-generated order for ${year}-${month.toString().padStart(2, '0')} (No maintenance items found)`\r\n  };\r\n  \r\n  const fields = Object.keys(newOrder).join(', ');\r\n  const placeholders = Object.keys(newOrder).map((_, i) => `$${i + 1}`).join(', ');\r\n  const values = Object.values(newOrder);\r\n  \r\n  const result = await query(\r\n    `INSERT INTO purchase_orders (${fields}) VALUES (${placeholders}) RETURNING *`,\r\n    values\r\n  );\r\n  \r\n  return result.rows[0];\r\n};\r\n\r\n// Process Received Items\r\nexport const processReceivedItems = async (\r\n  purchaseOrderId: string, \r\n  receivedItems: Array<{ id: string, received_quantity: number }>\r\n): Promise<void> => {\r\n  try {\r\n    // Process each received item\r\n    for (const item of receivedItems) {\r\n      // 1. Update the purchase item\r\n      const updateItemResult = await query(\r\n        'UPDATE purchase_items SET received_quantity = $1 WHERE id = $2 RETURNING *',\r\n        [item.received_quantity, item.id]\r\n      );\r\n      \r\n      if (updateItemResult.rows.length === 0) {\r\n        throw new Error(`Purchase item with ID ${item.id} not found`);\r\n      }\r\n      \r\n      const purchaseItem = updateItemResult.rows[0];\r\n      \r\n      // 2. Update inventory\r\n      // First, get the current inventory for this item\r\n      const inventoryResult = await query(\r\n        'SELECT * FROM inventory WHERE item_id = $1',\r\n        [purchaseItem.item_id]\r\n      );\r\n      \r\n      const currentInventory = inventoryResult.rows[0];\r\n      \r\n      // If inventory entry exists, update it\r\n      if (currentInventory) {\r\n        await query(\r\n          'UPDATE inventory SET quantity = $1, last_updated = $2 WHERE id = $3',\r\n          [currentInventory.quantity + item.received_quantity, new Date().toISOString(), currentInventory.id]\r\n        );\r\n      } \r\n      // If no inventory entry exists, create one\r\n      else {\r\n        await query(\r\n          'INSERT INTO inventory (item_id, quantity, unit_price, last_updated) VALUES ($1, $2, $3, $4)',\r\n          [purchaseItem.item_id, item.received_quantity, purchaseItem.unit_price, new Date().toISOString()]\r\n        );\r\n      }\r\n    }\r\n    \r\n    // 3. Update the purchase order status to 'received'\r\n    await query(\r\n      'UPDATE purchase_orders SET status = $1 WHERE id = $2',\r\n      ['received', purchaseOrderId]\r\n    );\r\n  } catch (err) {\r\n    console.error('Error in processReceivedItems:', err);\r\n    throw err;\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 905, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/reports/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { getMaintenanceRequests, getMonthlyMaintenanceRequests } from '@/lib/services/maintenanceService';\r\nimport { getLowStockItems } from '@/lib/services/inventoryService';\r\nimport { getPurchaseOrders } from '@/lib/services/purchaseService';\r\nimport { MaintenanceRequest, Inventory, PurchaseOrder } from '@/models/types';\r\n\r\n// Extended inventory type with item details\r\ntype InventoryWithItem = Inventory & {\r\n  items: {\r\n    id: string;\r\n    name: string;\r\n    category_id: string;\r\n    unit: string;\r\n  };\r\n};\r\n\r\nexport default function ReportsPage() {\r\n  const [timeframe, setTimeframe] = useState<'month' | 'quarter' | 'year'>('month');\r\n  const [maintenanceStats, setMaintenanceStats] = useState({\r\n    total: 0,\r\n    pending: 0,\r\n    inProgress: 0,\r\n    completed: 0,\r\n    completionRate: 0,\r\n    averageCompletionDays: 0\r\n  });\r\n  const [inventoryStats, setInventoryStats] = useState({\r\n    lowStockCount: 0,\r\n    lowStockItems: [] as InventoryWithItem[]\r\n  });\r\n  const [purchaseStats, setPurchaseStats] = useState({\r\n    total: 0,\r\n    totalAmount: 0,\r\n    pending: 0,\r\n    completed: 0\r\n  });\r\n  \r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Get the current date and previous periods\r\n  const currentDate = new Date();\r\n  const currentYear = currentDate.getFullYear();\r\n  const currentMonth = currentDate.getMonth();\r\n  \r\n  // Calculate date ranges based on selected timeframe\r\n  const getDateRange = () => {\r\n    let startDate = new Date();\r\n    \r\n    if (timeframe === 'month') {\r\n      startDate = new Date(currentYear, currentMonth, 1);\r\n    } else if (timeframe === 'quarter') {\r\n      const quarterStartMonth = Math.floor(currentMonth / 3) * 3;\r\n      startDate = new Date(currentYear, quarterStartMonth, 1);\r\n    } else if (timeframe === 'year') {\r\n      startDate = new Date(currentYear, 0, 1);\r\n    }\r\n    \r\n    return {\r\n      start: startDate,\r\n      end: currentDate\r\n    };\r\n  };\r\n  \r\n  // Load report data based on the selected timeframe\r\n  useEffect(() => {\r\n    const fetchReportData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const dateRange = getDateRange();\r\n        \r\n        // Fetch maintenance data\r\n        const maintenanceData = await getMaintenanceRequests();\r\n        \r\n        // Filter maintenance requests by date range\r\n        const filteredMaintenance = maintenanceData.filter(request => {\r\n          const requestDate = new Date(request.reported_date);\r\n          return requestDate >= dateRange.start && requestDate <= dateRange.end;\r\n        });\r\n        \r\n        // Calculate maintenance statistics\r\n        const totalRequests = filteredMaintenance.length;\r\n        const pendingRequests = filteredMaintenance.filter(req => \r\n          req.status === 'pending' || req.status === 'approved'\r\n        ).length;\r\n        const inProgressRequests = filteredMaintenance.filter(req => req.status === 'in_progress').length;\r\n        const completedRequests = filteredMaintenance.filter(req => req.status === 'completed').length;\r\n        const completionRate = totalRequests > 0 ? (completedRequests / totalRequests) * 100 : 0;\r\n        \r\n        // Calculate average completion time in days\r\n        let totalCompletionDays = 0;\r\n        let completedRequestsWithDates = 0;\r\n        \r\n        filteredMaintenance.forEach(req => {\r\n          if (req.status === 'completed' && req.completion_date) {\r\n            const reportedDate = new Date(req.reported_date);\r\n            const completedDate = new Date(req.completion_date);\r\n            const daysToComplete = Math.floor((completedDate.getTime() - reportedDate.getTime()) / (1000 * 60 * 60 * 24));\r\n            \r\n            totalCompletionDays += daysToComplete;\r\n            completedRequestsWithDates++;\r\n          }\r\n        });\r\n        \r\n        const averageCompletionDays = completedRequestsWithDates > 0 \r\n          ? Math.round(totalCompletionDays / completedRequestsWithDates) \r\n          : 0;\r\n        \r\n        setMaintenanceStats({\r\n          total: totalRequests,\r\n          pending: pendingRequests,\r\n          inProgress: inProgressRequests,\r\n          completed: completedRequests,\r\n          completionRate: parseFloat(completionRate.toFixed(1)),\r\n          averageCompletionDays\r\n        });\r\n        \r\n        // Fetch low stock items\r\n        const lowStock = await getLowStockItems(5);\r\n        setInventoryStats({\r\n          lowStockCount: lowStock.length,\r\n          lowStockItems: lowStock as InventoryWithItem[]\r\n        });\r\n        \r\n        // Fetch purchase orders\r\n        const purchaseOrders = await getPurchaseOrders();\r\n        \r\n        // Filter purchase orders by date range\r\n        const filteredPurchases = purchaseOrders.filter(order => {\r\n          const orderDate = new Date(order.order_date);\r\n          return orderDate >= dateRange.start && orderDate <= dateRange.end;\r\n        });\r\n        \r\n        const totalOrders = filteredPurchases.length;\r\n        const pendingOrders = filteredPurchases.filter(order => \r\n          order.status === 'draft' || order.status === 'submitted' || order.status === 'approved' || order.status === 'ordered'\r\n        ).length;\r\n        const completedOrders = filteredPurchases.filter(order => \r\n          order.status === 'received' || order.status === 'completed'\r\n        ).length;\r\n        \r\n        // Calculate total purchase amount\r\n        const totalAmount = filteredPurchases.reduce((sum, order) => {\r\n          return sum + (order.total_amount || 0);\r\n        }, 0);\r\n        \r\n        setPurchaseStats({\r\n          total: totalOrders,\r\n          totalAmount,\r\n          pending: pendingOrders,\r\n          completed: completedOrders\r\n        });\r\n      } catch (err) {\r\n        // Improved error handling with proper formatting\r\n        const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\r\n        console.error('Error fetching report data:', errorMessage);\r\n        setError('حدث خطأ أثناء تحميل بيانات التقارير. الرجاء المحاولة مرة أخرى.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchReportData();\r\n  }, [timeframe]);\r\n  \r\n  return (\r\n    <div className=\"container mx-auto bg-gray-50 dark:bg-gray-900 min-h-screen p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-6 dark:text-white\">التقارير والإحصائيات</h1>\r\n      \r\n      {error && (\r\n        <div className=\"bg-red-100 border-r-4 border-red-500 text-red-700 p-4 mb-6 rounded-md dark:bg-red-900/30 dark:border-red-800 dark:text-red-400\">\r\n          <p>{error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Time Period Selection */}\r\n      <div className=\"bg-white shadow-md rounded-lg p-4 mb-8 dark:bg-gray-800\">\r\n        <h2 className=\"text-lg font-semibold mb-4 dark:text-white\">الفترة الزمنية</h2>\r\n        <div className=\"flex gap-4\">\r\n          <button\r\n            onClick={() => setTimeframe('month')}\r\n            className={`px-4 py-2 rounded-md ${\r\n              timeframe === 'month' \r\n                ? 'bg-teal-600 text-white dark:bg-teal-700' \r\n                : 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200'\r\n            }`}\r\n          >\r\n            شهري\r\n          </button>\r\n          <button\r\n            onClick={() => setTimeframe('quarter')}\r\n            className={`px-4 py-2 rounded-md ${\r\n              timeframe === 'quarter' \r\n                ? 'bg-teal-600 text-white dark:bg-teal-700' \r\n                : 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200'\r\n            }`}\r\n          >\r\n            ربع سنوي\r\n          </button>\r\n          <button\r\n            onClick={() => setTimeframe('year')}\r\n            className={`px-4 py-2 rounded-md ${\r\n              timeframe === 'year' \r\n                ? 'bg-teal-600 text-white dark:bg-teal-700' \r\n                : 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200'\r\n            }`}\r\n          >\r\n            سنوي\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"text-center py-10 dark:text-gray-300\">\r\n          <p className=\"text-lg\">جاري تحميل البيانات...</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* Maintenance Statistics */}\r\n          <div className=\"bg-white shadow-md rounded-lg overflow-hidden mb-8 dark:bg-gray-800\">\r\n            <div className=\"bg-teal-50 p-4 border-b border-teal-100 dark:bg-teal-900/20 dark:border-teal-900/30\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h2 className=\"text-lg font-semibold text-teal-800 dark:text-teal-300\">إحصائيات طلبات الصيانة</h2>\r\n                <Link href=\"/reports/maintenance\" className=\"text-teal-600 hover:underline dark:text-teal-400\">\r\n                  عرض التقرير المفصل\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            <div className=\"p-6\">\r\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\r\n                <div className=\"text-center p-4 bg-gray-50 rounded-lg dark:bg-gray-700\">\r\n                  <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">إجمالي الطلبات</p>\r\n                  <p className=\"text-2xl font-bold dark:text-white\">{maintenanceStats.total}</p>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-yellow-50 rounded-lg dark:bg-yellow-900/20\">\r\n                  <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">قيد الانتظار</p>\r\n                  <p className=\"text-2xl font-bold text-yellow-700 dark:text-yellow-300\">{maintenanceStats.pending}</p>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg dark:bg-blue-900/20\">\r\n                  <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">قيد التنفيذ</p>\r\n                  <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{maintenanceStats.inProgress}</p>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-green-50 rounded-lg dark:bg-green-900/20\">\r\n                  <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">مكتملة</p>\r\n                  <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">{maintenanceStats.completed}</p>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg dark:bg-purple-900/20\">\r\n                  <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">معدل الإنجاز</p>\r\n                  <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\">{maintenanceStats.completionRate}%</p>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-indigo-50 rounded-lg dark:bg-indigo-900/20\">\r\n                  <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">متوسط مدة الإنجاز</p>\r\n                  <p className=\"text-2xl font-bold text-indigo-700 dark:text-indigo-300\">{maintenanceStats.averageCompletionDays} يوم</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Inventory and Purchase Statistics */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\r\n            {/* Inventory Status */}\r\n            <div className=\"bg-white shadow-md rounded-lg overflow-hidden dark:bg-gray-800\">\r\n              <div className=\"bg-blue-50 p-4 border-b border-blue-100 dark:bg-blue-900/20 dark:border-blue-900/30\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <h2 className=\"text-lg font-semibold text-blue-800 dark:text-blue-300\">حالة المخزون</h2>\r\n                  <Link href=\"/inventory\" className=\"text-blue-600 hover:underline dark:text-blue-400\">\r\n                    إدارة المخزون\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"p-6\">\r\n                <div className=\"mb-6\">\r\n                  <div className=\"flex justify-between mb-2\">\r\n                    <h3 className=\"font-medium dark:text-white\">الأصناف منخفضة المخزون</h3>\r\n                    <span className=\"bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs dark:bg-red-900/30 dark:text-red-300\">\r\n                      {inventoryStats.lowStockCount} صنف\r\n                    </span>\r\n                  </div>\r\n                  \r\n                  {inventoryStats.lowStockItems.length > 0 ? (\r\n                    <ul className=\"divide-y dark:divide-gray-700\">\r\n                      {inventoryStats.lowStockItems.slice(0, 5).map(item => (\r\n                        <li key={item.id} className=\"py-2 flex justify-between dark:text-gray-300\">\r\n                          <span>{item.items.name}</span>\r\n                          <span className=\"font-bold text-red-600 dark:text-red-400\">{item.quantity} {item.items.unit}</span>\r\n                        </li>\r\n                      ))}\r\n                      {inventoryStats.lowStockItems.length > 5 && (\r\n                        <li className=\"py-2 text-center text-blue-600 hover:underline dark:text-blue-400\">\r\n                          <Link href=\"/inventory?showLowStock=true\">\r\n                            عرض الكل ({inventoryStats.lowStockItems.length})\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                    </ul>\r\n                  ) : (\r\n                    <p className=\"text-gray-500 text-center py-4 dark:text-gray-400\">\r\n                      لا توجد أصناف منخفضة المخزون\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                \r\n                <Link href=\"/inventory/report\" className=\"btn bg-blue-600 hover:bg-blue-700 text-white w-full py-2 px-4 rounded-md block text-center dark:bg-blue-700 dark:hover:bg-blue-600\">\r\n                  تقرير المخزون الشامل\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Purchase Orders Status */}\r\n            <div className=\"bg-white shadow-md rounded-lg overflow-hidden dark:bg-gray-800\">\r\n              <div className=\"bg-purple-50 p-4 border-b border-purple-100 dark:bg-purple-900/20 dark:border-purple-900/30\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <h2 className=\"text-lg font-semibold text-purple-800 dark:text-purple-300\">حالة المشتريات</h2>\r\n                  <Link href=\"/purchase-orders\" className=\"text-purple-600 hover:underline dark:text-purple-400\">\r\n                    عرض طلبات الشراء\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"p-6\">\r\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\r\n                  <div className=\"text-center p-4 bg-gray-50 rounded-lg dark:bg-gray-700\">\r\n                    <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">إجمالي الطلبات</p>\r\n                    <p className=\"text-2xl font-bold dark:text-white\">{purchaseStats.total}</p>\r\n                  </div>\r\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg dark:bg-green-900/20\">\r\n                    <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">المبلغ الإجمالي</p>\r\n                    <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">{purchaseStats.totalAmount.toLocaleString()} ريال</p>\r\n                  </div>\r\n                  <div className=\"text-center p-4 bg-yellow-50 rounded-lg dark:bg-yellow-900/20\">\r\n                    <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">قيد الإجراء</p>\r\n                    <p className=\"text-2xl font-bold text-yellow-700 dark:text-yellow-300\">{purchaseStats.pending}</p>\r\n                  </div>\r\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg dark:bg-blue-900/20\">\r\n                    <p className=\"text-sm text-gray-500 mb-1 dark:text-gray-400\">مكتملة</p>\r\n                    <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{purchaseStats.completed}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <Link href=\"/reports/purchases\" className=\"btn bg-purple-600 hover:bg-purple-700 text-white w-full py-2 px-4 rounded-md block text-center dark:bg-purple-700 dark:hover:bg-purple-600\">\r\n                  تقرير المشتريات الشامل\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Monthly Reports Links */}\r\n          <div className=\"bg-white shadow-md rounded-lg overflow-hidden mb-8 dark:bg-gray-800\">\r\n            <div className=\"p-4 border-b dark:border-gray-700\">\r\n              <h2 className=\"text-lg font-semibold dark:text-white\">التقارير الشهرية</h2>\r\n            </div>\r\n            <div className=\"p-6\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <Link \r\n                  href={`/reports/monthly/${currentYear}/${currentMonth + 1}/maintenance`}\r\n                  className=\"p-4 border rounded-lg bg-gray-50 hover:bg-gray-100 flex flex-col items-center dark:bg-gray-700 dark:border-gray-600 dark:hover:bg-gray-600\"\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 text-teal-600 mb-2 dark:text-teal-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                  </svg>\r\n                  <span className=\"text-center font-medium dark:text-white\">تقرير الصيانة الشهري</span>\r\n                </Link>\r\n                \r\n                <Link \r\n                  href={`/reports/monthly/${currentYear}/${currentMonth + 1}/inventory`}\r\n                  className=\"p-4 border rounded-lg bg-gray-50 hover:bg-gray-100 flex flex-col items-center dark:bg-gray-700 dark:border-gray-600 dark:hover:bg-gray-600\"\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 text-blue-600 mb-2 dark:text-blue-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\r\n                  </svg>\r\n                  <span className=\"text-center font-medium dark:text-white\">تقرير حركة المخزون</span>\r\n                </Link>\r\n                \r\n                <Link \r\n                  href={`/reports/monthly/${currentYear}/${currentMonth + 1}/purchases`}\r\n                  className=\"p-4 border rounded-lg bg-gray-50 hover:bg-gray-100 flex flex-col items-center dark:bg-gray-700 dark:border-gray-600 dark:hover:bg-gray-600\"\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 text-purple-600 mb-2 dark:text-purple-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" />\r\n                  </svg>\r\n                  <span className=\"text-center font-medium dark:text-white\">تقرير المشتريات الشهري</span>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Export Reports */}\r\n          <div className=\"bg-white shadow-md rounded-lg overflow-hidden dark:bg-gray-800\">\r\n            <div className=\"p-4 border-b dark:border-gray-700\">\r\n              <h2 className=\"text-lg font-semibold dark:text-white\">تصدير التقارير</h2>\r\n            </div>\r\n            <div className=\"p-6\">\r\n              <p className=\"text-gray-600 mb-4 dark:text-gray-400\">\r\n                يمكنك تصدير التقارير بصيغ مختلفة للطباعة أو المشاركة أو الأرشفة.\r\n              </p>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <button className=\"btn bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md dark:bg-green-700 dark:hover:bg-green-600\">\r\n                  تصدير إلى Excel\r\n                </button>\r\n                <button className=\"btn bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-md dark:bg-red-700 dark:hover:bg-red-600\">\r\n                  تصدير إلى PDF\r\n                </button>\r\n                <button className=\"btn bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-md dark:bg-gray-700 dark:hover:bg-gray-600\">\r\n                  طباعة التقرير\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}