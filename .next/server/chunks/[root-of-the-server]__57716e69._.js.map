{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/neondb.ts"],"sourcesContent":["import { Pool } from 'pg';\r\n\r\n// استخدام عنوان الاتصال المباشر بقاعدة بيانات Neon\r\nconst connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n\r\n// إنشاء تجمع اتصالات لقاعدة البيانات\r\nexport const pool = new Pool({\r\n  connectionString,\r\n});\r\n\r\n// وظيفة مساعدة لتنفيذ استعلامات قاعدة البيانات\r\nexport async function query(text: string, params?: any[]) {\r\n  const client = await pool.connect();\r\n  try {\r\n    const result = await client.query(text, params);\r\n    return result;\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n// التحقق من اتصال قاعدة البيانات\r\nexport async function testConnection() {\r\n  try {\r\n    const result = await query('SELECT NOW()');\r\n    console.log('اتصال ناجح بقاعدة بيانات Neon:', result.rows[0]);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('فشل الاتصال بقاعدة بيانات Neon:', error);\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":";;;;;AAAA;;;;;;AAEA,mDAAmD;AACnD,MAAM,mBAAmB;AAGlB,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IAC3B;AACF;AAGO,eAAe,MAAM,IAAY,EAAE,MAAc;IACtD,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM;QACxC,OAAO;IACT,SAAU;QACR,OAAO,OAAO;IAChB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,MAAM;QAC3B,QAAQ,GAAG,CAAC,kCAAkC,OAAO,IAAI,CAAC,EAAE;QAC5D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/housing/floors/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { query } from '@/lib/neondb';\r\n\r\n// وظيفة للتعامل مع الأخطاء وإرجاع استجابة موحدة\r\nfunction handleError(error: any) {\r\n  console.error('خطأ في واجهة API للطوابق:', error);\r\n  \r\n  return NextResponse.json(\r\n    { error: error.message || 'حدث خطأ غير متوقع' },\r\n    { status: 500 }\r\n  );\r\n}\r\n\r\n// الحصول على طوابق مبنى محدد\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const buildingId = searchParams.get('buildingId');\r\n    \r\n    if (!buildingId) {\r\n      return NextResponse.json(\r\n        { error: 'معرف المبنى مطلوب' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // أولاً، الحصول على عدد الطوابق في المبنى\r\n    const buildingResult = await query(\r\n      'SELECT floors FROM buildings WHERE id = $1',\r\n      [buildingId]\r\n    );\r\n    \r\n    if (buildingResult.rows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: `لم يتم العثور على مبنى بالمعرف ${buildingId}` },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    const floorCount = buildingResult.rows[0].floors || 0;\r\n    \r\n    // الحصول على الغرف المرتبطة بهذا المبنى، مجمعة حسب الطابق\r\n    const roomsResult = await query(\r\n      'SELECT id, floor, room_number, type, status FROM rooms WHERE building_id = $1 ORDER BY floor, room_number',\r\n      [buildingId]\r\n    );\r\n    \r\n    // إنشاء مصفوفة من الطوابق\r\n    const floors = [];\r\n    \r\n    // إنشاء طابق لكل رقم طابق في المبنى\r\n    for (let i = 1; i <= floorCount; i++) {\r\n      const floorId = `floor-${buildingId}-${i}`; // إنشاء معرف فريد للطابق\r\n      \r\n      floors.push({\r\n        id: floorId,\r\n        number: i,\r\n        building_id: buildingId,\r\n        rooms: roomsResult.rows\r\n          .filter(room => room.floor === i)\r\n          .map(room => ({\r\n            id: room.id,\r\n            room_number: room.room_number,\r\n            type: room.type,\r\n            status: room.status\r\n          }))\r\n      });\r\n    }\r\n    \r\n    return NextResponse.json(floors);\r\n  } catch (error) {\r\n    return handleError(error);\r\n  }\r\n}\r\n\r\n// إضافة طابق جديد (عن طريق تحديث عدد الطوابق في المبنى)\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    \r\n    // التحقق من وجود البيانات المطلوبة\r\n    if (!body.building_id || !body.number) {\r\n      return NextResponse.json(\r\n        { error: 'معرف المبنى ورقم الطابق مطلوبان' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // التحقق من وجود المبنى وعدد طوابقه الحالي\r\n    const buildingResult = await query(\r\n      'SELECT floors FROM buildings WHERE id = $1',\r\n      [body.building_id]\r\n    );\r\n    \r\n    if (buildingResult.rows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: `لم يتم العثور على مبنى بالمعرف ${body.building_id}` },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    const currentFloors = buildingResult.rows[0].floors || 0;\r\n    \r\n    // التأكد من أن رقم الطابق الجديد أكبر من عدد الطوابق الحالية\r\n    if (body.number <= currentFloors) {\r\n      // إذا كان الطابق موجود بالفعل، إرجاعه\r\n      const floorId = `floor-${body.building_id}-${body.number}`;\r\n      \r\n      return NextResponse.json({\r\n        id: body.id || floorId,\r\n        number: body.number,\r\n        building_id: body.building_id,\r\n        rooms: []\r\n      });\r\n    }\r\n    \r\n    // تحديث عدد الطوابق في المبنى\r\n    await query(\r\n      'UPDATE buildings SET floors = $1 WHERE id = $2',\r\n      [Math.max(currentFloors, body.number), body.building_id]\r\n    );\r\n    \r\n    // إرجاع بيانات الطابق الجديد\r\n    const floorId = body.id || `floor-${body.building_id}-${body.number}`;\r\n    \r\n    return NextResponse.json({\r\n      id: floorId,\r\n      number: body.number,\r\n      building_id: body.building_id,\r\n      rooms: []\r\n    });\r\n  } catch (error) {\r\n    return handleError(error);\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}