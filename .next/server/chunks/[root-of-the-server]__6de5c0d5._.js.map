{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize the Supabase client with proper Supabase URL and key\r\nconst supabaseUrl = 'zzzzz';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10aWN2bXlmcmRtY2lhZWlwZnh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEwODc1OTMsImV4cCI6MjA1NjY2MzU5M30.6iudxBl6js0heW1mhoSmcXegTIN_lAN2GiFeA3plSIo';\r\n\r\n// Create the Supabase client\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n// Store PostgreSQL direct connection URL for database initialization scripts\r\nexport const postgresUrl = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';"],"names":[],"mappings":";;;;AAAA;;AAEA,kEAAkE;AAClE,MAAM,cAAc;AACpB,MAAM,cAAc;AAGb,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,cAAc","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/services/maintenanceService.ts"],"sourcesContent":["import { supabase } from '../supabase';\r\nimport { MaintenanceRequest, MaintenanceItem } from '@/models/types';\r\n\r\n// Function to check if maintenance_requests table exists\r\nexport const checkMaintenanceTablesExist = async (): Promise<{ exists: boolean, message: string }> => {\r\n  try {\r\n    // Try to get just one record to check if the table exists\r\n    const { data, error } = await supabase.from('maintenance_requests').select('id').limit(1);\r\n    \r\n    if (error) {\r\n      if (error.message.includes('does not exist')) {\r\n        return { \r\n          exists: false, \r\n          message: 'The maintenance_requests table does not exist. Database initialization is required.' \r\n        };\r\n      }\r\n      \r\n      return { \r\n        exists: false, \r\n        message: `Error checking table: ${error.message}` \r\n      };\r\n    }\r\n    \r\n    return { exists: true, message: 'Table exists and is accessible' };\r\n  } catch (err: any) {\r\n    return { \r\n      exists: false, \r\n      message: `Error checking maintenance tables: ${err.message}`\r\n    };\r\n  }\r\n};\r\n\r\n// Maintenance Request Operations\r\nexport const getMaintenanceRequests = async (\r\n  complexId?: string, \r\n  buildingId?: string, \r\n  status?: MaintenanceRequest['status']\r\n): Promise<MaintenanceRequest[]> => {\r\n  try {\r\n    // Check if table exists first\r\n    const tableStatus = await checkMaintenanceTablesExist();\r\n    if (!tableStatus.exists) {\r\n      console.warn(`Table check warning: ${tableStatus.message}`);\r\n      return []; // Return empty array instead of throwing\r\n    }\r\n    \r\n    let query = supabase.from('maintenance_requests').select('*');\r\n    \r\n    if (complexId) {\r\n      query = query.eq('complex_id', complexId);\r\n    }\r\n    \r\n    if (buildingId) {\r\n      query = query.eq('building_id', buildingId);\r\n    }\r\n    \r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n    \r\n    const { data, error } = await query.order('reported_date', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Supabase error in getMaintenanceRequests:', error);\r\n      return []; // Return empty array on error\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceRequests:', err);\r\n    return []; // Return empty array on error\r\n  }\r\n};\r\n\r\nexport const getMaintenanceRequestById = async (id: string): Promise<MaintenanceRequest | null> => {\r\n  try {\r\n    // Check if table exists first\r\n    const tableStatus = await checkMaintenanceTablesExist();\r\n    if (!tableStatus.exists) {\r\n      console.warn(`Table check warning: ${tableStatus.message}`);\r\n      return null;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('maintenance_requests')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error fetching maintenance request:', error);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  } catch (err) {\r\n    console.error('Error in getMaintenanceRequestById:', err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createMaintenanceRequest = async (\r\n  request: Omit<MaintenanceRequest, 'id' | 'reported_date'>\r\n): Promise<MaintenanceRequest> => {\r\n  try {\r\n    // Check if table exists first\r\n    const tableStatus = await checkMaintenanceTablesExist();\r\n    if (!tableStatus.exists) {\r\n      throw new Error(`Cannot create maintenance request: ${tableStatus.message}`);\r\n    }\r\n    \r\n    const newRequest = {\r\n      ...request,\r\n      reported_date: new Date().toISOString(),\r\n      status: request.status || 'pending'\r\n    };\r\n\r\n    const { data, error } = await supabase\r\n      .from('maintenance_requests')\r\n      .insert([newRequest])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  } catch (err: any) {\r\n    console.error('Error creating maintenance request:', err);\r\n    throw new Error(`Failed to create maintenance request: ${err.message}`);\r\n  }\r\n};\r\n\r\nexport const updateMaintenanceRequest = async (\r\n  id: string, \r\n  updates: Partial<MaintenanceRequest>\r\n): Promise<MaintenanceRequest> => {\r\n  try {\r\n    // Check if table exists first\r\n    const tableStatus = await checkMaintenanceTablesExist();\r\n    if (!tableStatus.exists) {\r\n      throw new Error(`Cannot update maintenance request: ${tableStatus.message}`);\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('maintenance_requests')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    return data;\r\n  } catch (err: any) {\r\n    console.error('Error updating maintenance request:', err);\r\n    throw new Error(`Failed to update maintenance request: ${err.message}`);\r\n  }\r\n};\r\n\r\nexport const deleteMaintenanceRequest = async (id: string): Promise<void> => {\r\n  try {\r\n    // Check if table exists first\r\n    const tableStatus = await checkMaintenanceTablesExist();\r\n    if (!tableStatus.exists) {\r\n      throw new Error(`Cannot delete maintenance request: ${tableStatus.message}`);\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('maintenance_requests')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  } catch (err: any) {\r\n    console.error('Error deleting maintenance request:', err);\r\n    throw new Error(`Failed to delete maintenance request: ${err.message}`);\r\n  }\r\n};\r\n\r\n// Maintenance Items Operations\r\nexport const getMaintenanceItems = async (\r\n  maintenanceId: string\r\n): Promise<MaintenanceItem[]> => {\r\n  const { data, error } = await supabase\r\n    .from('maintenance_items')\r\n    .select('*')\r\n    .eq('maintenance_id', maintenanceId);\r\n  \r\n  if (error) throw error;\r\n  return data || [];\r\n};\r\n\r\nexport const getMaintenanceItemById = async (id: string): Promise<MaintenanceItem | null> => {\r\n  const { data, error } = await supabase\r\n    .from('maintenance_items')\r\n    .select('*')\r\n    .eq('id', id)\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const createMaintenanceItem = async (\r\n  item: Omit<MaintenanceItem, 'id'>\r\n): Promise<MaintenanceItem> => {\r\n  const { data, error } = await supabase\r\n    .from('maintenance_items')\r\n    .insert([item])\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const updateMaintenanceItem = async (\r\n  id: string, \r\n  updates: Partial<MaintenanceItem>\r\n): Promise<MaintenanceItem> => {\r\n  const { data, error } = await supabase\r\n    .from('maintenance_items')\r\n    .update(updates)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n  \r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const deleteMaintenanceItem = async (id: string): Promise<void> => {\r\n  const { error } = await supabase\r\n    .from('maintenance_items')\r\n    .delete()\r\n    .eq('id', id);\r\n  \r\n  if (error) throw error;\r\n};\r\n\r\n// Get maintenance requests for monthly summary\r\nexport const getMonthlyMaintenanceRequests = async (\r\n  year: number,\r\n  month: number\r\n): Promise<MaintenanceRequest[]> => {\r\n  // Create start and end date for the specified month\r\n  const startDate = new Date(year, month - 1, 1).toISOString();\r\n  const endDate = new Date(year, month, 0).toISOString();\r\n  \r\n  const { data, error } = await supabase\r\n    .from('maintenance_requests')\r\n    .select('*')\r\n    .gte('reported_date', startDate)\r\n    .lte('reported_date', endDate);\r\n  \r\n  if (error) throw error;\r\n  return data || [];\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/diagnostics/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { spawn } from 'child_process';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { checkMaintenanceTablesExist } from '@/lib/services/maintenanceService';\r\nimport { Pool } from 'pg';\r\n\r\n// Table list to check for existence\r\nconst REQUIRED_TABLES = [\r\n  'users',\r\n  'maintenance_requests',\r\n  'residential_complexes',\r\n  'buildings',\r\n  'maintenance_items',\r\n  'rooms',\r\n  'facilities',\r\n  'categories',\r\n  'items',\r\n  'inventory',\r\n  'purchase_orders',\r\n  'purchase_items'\r\n];\r\n\r\n// Function to run database setup directly without spawning a process\r\nasync function executeDbSetup(): Promise<{ success: boolean; details: string }> {\r\n  try {\r\n    // Using the same connection string from init-pg-db.js\r\n    const connectionString = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';\r\n    \r\n    const pool = new Pool({ connectionString });\r\n    const client = await pool.connect();\r\n    \r\n    console.log('Connected to database, reading SQL file...');\r\n    \r\n    let sqlFilePath;\r\n    const projectRoot = process.cwd();\r\n    \r\n    // Try to find the SQL file with different path combinations\r\n    const possiblePaths = [\r\n      path.join(projectRoot, 'scripts', 'init_database.sql'),\r\n      path.join(projectRoot, '..', 'scripts', 'init_database.sql'),\r\n      path.join(projectRoot, '../..', 'scripts', 'init_database.sql')\r\n    ];\r\n    \r\n    for (const tryPath of possiblePaths) {\r\n      if (fs.existsSync(tryPath)) {\r\n        sqlFilePath = tryPath;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!sqlFilePath) {\r\n      return {\r\n        success: false,\r\n        details: `SQL file not found. Tried paths: ${possiblePaths.join(', ')}`\r\n      };\r\n    }\r\n    \r\n    console.log(`Found SQL file at: ${sqlFilePath}`);\r\n    const sqlScript = fs.readFileSync(sqlFilePath, 'utf8');\r\n    \r\n    try {\r\n      // Execute SQL script\r\n      await client.query(sqlScript);\r\n      console.log('Database initialization completed successfully');\r\n      \r\n      return {\r\n        success: true,\r\n        details: 'Database tables created successfully'\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Error executing SQL:', error);\r\n      return {\r\n        success: false,\r\n        details: `Error executing SQL: ${error.message}`\r\n      };\r\n    } finally {\r\n      client.release();\r\n      await pool.end();\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Database setup error:', error);\r\n    return {\r\n      success: false,\r\n      details: `Database initialization failed: ${error.message}`\r\n    };\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Test connection by attempting to fetch the database version\r\n    const { data: versionData, error: versionError } = await supabase.rpc('version');\r\n    \r\n    if (versionError) {\r\n      return NextResponse.json({ \r\n        status: 'error', \r\n        message: 'Failed to connect to database', \r\n        error: versionError.message,\r\n        details: versionError \r\n      }, { status: 500 });\r\n    }\r\n    \r\n    // Check all required tables\r\n    const tableResults: Record<string, boolean> = {};\r\n    const missingTables = [];\r\n    \r\n    for (const table of REQUIRED_TABLES) {\r\n      const exists = await checkTableExists(table);\r\n      tableResults[table] = exists;\r\n      \r\n      if (!exists) {\r\n        missingTables.push(table);\r\n      }\r\n    }\r\n    \r\n    // Get details from maintenance specific check\r\n    const maintenanceTablesStatus = await checkMaintenanceTablesExist();\r\n    \r\n    // Determine overall database status\r\n    const databaseStatus = missingTables.length === 0 \r\n      ? 'ready'\r\n      : missingTables.length === REQUIRED_TABLES.length \r\n        ? 'uninitialized' \r\n        : 'partial';\r\n    \r\n    return NextResponse.json({ \r\n      status: 'success', \r\n      message: 'Successfully connected to Supabase',\r\n      databaseStatus,\r\n      version: versionData,\r\n      tables: tableResults,\r\n      missingTables,\r\n      maintenanceTablesDetails: maintenanceTablesStatus,\r\n      setupRequired: missingTables.length > 0\r\n    });\r\n  } catch (err: any) {\r\n    return NextResponse.json({ \r\n      status: 'error', \r\n      message: 'Failed to run diagnostic tests',\r\n      error: err.message \r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { action } = await request.json();\r\n\r\n    if (action === 'setup_database') {\r\n      // First check current database status\r\n      const diagnosticsResult: Record<string, boolean> = {};\r\n      \r\n      for (const table of REQUIRED_TABLES) {\r\n        diagnosticsResult[table] = await checkTableExists(table);\r\n      }\r\n      \r\n      // Execute database setup directly instead of spawning a process\r\n      const setupResult = await executeDbSetup();\r\n      \r\n      if (setupResult.success) {\r\n        // After setup, verify that tables were created\r\n        const verificationResult: Record<string, boolean> = {};\r\n        let allTablesCreated = true;\r\n        \r\n        for (const table of REQUIRED_TABLES) {\r\n          const exists = await checkTableExists(table);\r\n          verificationResult[table] = exists;\r\n          if (!exists) {\r\n            allTablesCreated = false;\r\n          }\r\n        }\r\n        \r\n        return NextResponse.json({ \r\n          success: allTablesCreated, \r\n          message: allTablesCreated \r\n            ? 'تم إعداد قاعدة البيانات بنجاح'\r\n            : 'تم تنفيذ سكريبت الإعداد، لكن بعض الجداول لم يتم إنشاؤها',\r\n          details: setupResult.details,\r\n          beforeSetup: diagnosticsResult,\r\n          afterSetup: verificationResult\r\n        });\r\n      } else {\r\n        return NextResponse.json({ \r\n          success: false, \r\n          error: 'فشل إعداد قاعدة البيانات',\r\n          details: setupResult.details\r\n        }, { status: 500 });\r\n      }\r\n    } else if (action === 'fix_user_dependency') {\r\n      // تنفيذ إصلاح مشكلة المستخدم في جدول طلبات الصيانة\r\n      const result = await fixUserDependency();\r\n      \r\n      return NextResponse.json({ \r\n        success: result.success,\r\n        message: result.success ? 'تم إصلاح مشكلة المستخدم بنجاح' : 'فشل إصلاح مشكلة المستخدم',\r\n        details: result.details\r\n      });\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: 'إجراء غير معروف' \r\n    }, { status: 400 });\r\n    \r\n  } catch (error: any) {\r\n    console.error('Error in diagnostic API:', error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: error.message || 'حدث خطأ أثناء تنفيذ العملية',\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Function to fix the user dependency issue in maintenance_requests\r\nasync function fixUserDependency(): Promise<{ success: boolean; details: string }> {\r\n  try {\r\n    // Check if users table exists\r\n    const usersExist = await checkTableExists('users');\r\n    \r\n    if (!usersExist) {\r\n      // Create admin user first\r\n      const { error: userError } = await supabase\r\n        .from('users')\r\n        .insert([\r\n          { \r\n            email: 'admin@example.com', \r\n            full_name: 'Admin User', \r\n            role: 'admin'\r\n          }\r\n        ]);\r\n        \r\n      if (userError) {\r\n        return {\r\n          success: false,\r\n          details: `Failed to create admin user: ${userError.message}`\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Get the admin user id\r\n    const { data: adminUser, error: fetchError } = await supabase\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', 'admin@example.com')\r\n      .single();\r\n      \r\n    if (fetchError || !adminUser) {\r\n      return {\r\n        success: false,\r\n        details: `Could not find or create admin user: ${fetchError?.message || 'No user found'}`\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      details: `User dependency fix available with admin user ID: ${adminUser.id}`\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      details: `Error fixing user dependency: ${error.message}`\r\n    };\r\n  }\r\n}\r\n\r\nasync function checkTableExists(tableName: string): Promise<boolean> {\r\n  try {\r\n    // Try to get a single row from the table\r\n    const { data, error } = await supabase\r\n      .from(tableName)\r\n      .select('*')\r\n      .limit(1);\r\n    \r\n    if (error && error.message.includes('does not exist')) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}