{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize the Supabase client with proper Supabase URL and key\r\nconst supabaseUrl = 'https://mticvmyfrdmciaeipfxu.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10aWN2bXlmcmRtY2lhZWlwZnh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEwODc1OTMsImV4cCI6MjA1NjY2MzU5M30.6iudxBl6js0heW1mhoSmcXegTIN_lAN2GiFeA3plSIo';\r\n\r\n// Create the Supabase client\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n// Store PostgreSQL direct connection URL for database initialization scripts\r\nexport const postgresUrl = 'postgresql://HousingMaintenance_owner:npg_fC8S4bpZLsJw@ep-weathered-meadow-a44a1v3i-pooler.us-east-1.aws.neon.tech/HousingMaintenance?sslmode=require';"],"names":[],"mappings":";;;;AAAA;;AAEA,kEAAkE;AAClE,MAAM,cAAc;AACpB,MAAM,cAAc;AAGb,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,cAAc","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/MohammedAlabdali/HousingMaintenance/src/app/api/housing/facilities/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    console.log('[API] GET /api/housing/facilities - Starting request');\r\n    \r\n    // Extract query parameters\r\n    const { searchParams } = new URL(request.url);\r\n    const complexId = searchParams.get('complexId');\r\n    const buildingId = searchParams.get('buildingId');\r\n    \r\n    console.log(`[API] Fetching facilities for complexId: ${complexId || 'all'}, buildingId: ${buildingId || 'all'}`);\r\n    \r\n    // Build query\r\n    let query = supabase\r\n      .from('facilities')\r\n      .select('*');\r\n    \r\n    // Add filters\r\n    if (complexId) {\r\n      query = query.eq('complex_id', complexId);\r\n    }\r\n    \r\n    if (buildingId) {\r\n      query = query.eq('building_id', buildingId);\r\n    }\r\n    \r\n    // Execute query\r\n    const { data, error } = await query;\r\n    \r\n    if (error) {\r\n      console.error('[API] Error fetching facilities:', error);\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n    \r\n    console.log(`[API] Successfully fetched ${data?.length || 0} facilities`);\r\n    return NextResponse.json(data || []);\r\n  } catch (error: any) {\r\n    console.error('[API] Unexpected error in facilities API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch facilities: ' + (error.message || 'Unknown error') }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const facility = await request.json();\r\n    \r\n    // Validate required fields\r\n    if (!facility.name || !facility.type || !facility.complex_id || !facility.location_description) {\r\n      return NextResponse.json(\r\n        { error: 'Name, type, complex_id, and location_description are required' }, \r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Insert facility\r\n    const { data, error } = await supabase\r\n      .from('facilities')\r\n      .insert(facility)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error creating facility:', error);\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n    \r\n    return NextResponse.json(data);\r\n  } catch (error: any) {\r\n    console.error('Unexpected error creating facility:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to create facility' }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const updates = await request.json();\r\n    const { id, ...facilityData } = updates;\r\n    \r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Facility ID is required' }, { status: 400 });\r\n    }\r\n    \r\n    // Update facility\r\n    const { data, error } = await supabase\r\n      .from('facilities')\r\n      .update(facilityData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error updating facility:', error);\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n    \r\n    return NextResponse.json(data);\r\n  } catch (error: any) {\r\n    console.error('Unexpected error updating facility:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to update facility' }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id');\r\n    \r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Facility ID is required' }, { status: 400 });\r\n    }\r\n    \r\n    // Delete facility\r\n    const { error } = await supabase\r\n      .from('facilities')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) {\r\n      console.error('Error deleting facility:', error);\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n    \r\n    return NextResponse.json({ success: true });\r\n  } catch (error: any) {\r\n    console.error('Unexpected error deleting facility:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to delete facility' }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,YAAY,aAAa,GAAG,CAAC;QACnC,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,aAAa,MAAM,cAAc,EAAE,cAAc,OAAO;QAEhH,cAAc;QACd,IAAI,QAAQ,wHAAA,CAAA,WAAQ,CACjB,IAAI,CAAC,cACL,MAAM,CAAC;QAEV,cAAc;QACd,IAAI,WAAW;YACb,QAAQ,MAAM,EAAE,CAAC,cAAc;QACjC;QAEA,IAAI,YAAY;YACd,QAAQ,MAAM,EAAE,CAAC,eAAe;QAClC;QAEA,gBAAgB;QAChB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM;QAE9B,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,MAAM,UAAU,EAAE,WAAW,CAAC;QACxE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ,EAAE;IACrC,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iCAAiC,CAAC,MAAM,OAAO,IAAI,eAAe;QAAE,GAC7E;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,IAAI;QAEnC,2BAA2B;QAC3B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,UAAU,IAAI,CAAC,SAAS,oBAAoB,EAAE;YAC9F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgE,GACzE;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,wHAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,cACL,MAAM,CAAC,UACP,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,EAAE,EAAE,EAAE,GAAG,cAAc,GAAG;QAEhC,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,kBAAkB;QAClB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,wHAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,cACL,MAAM,CAAC,cACP,EAAE,CAAC,MAAM,IACT,MAAM,GACN,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,kBAAkB;QAClB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,wHAAA,CAAA,WAAQ,CAC7B,IAAI,CAAC,cACL,MAAM,GACN,EAAE,CAAC,MAAM;QAEZ,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}